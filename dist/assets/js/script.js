"use strict";var _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t};!function(t,e,n){var i={filterId:0},r=n("body"),o=function(o,s){var u,l,f,a={intensity:5,forceSVGUrl:!1,animationOptions:{duration:1e3,easing:"linear"}},c=n.extend(a,s),d=" -webkit- -moz- -o- -ms- ".split(" "),m={},h={cssfilters:function(){var t=e.createElement("div");return t.style.cssText=d.join("filter:blur(2px); "),!!t.style.length&&(void 0===e.documentMode||e.documentMode>9)}(),svgfilters:function(){var t=!1;try{t=void 0!==("undefined"==typeof SVGFEColorMatrixElement?"undefined":_typeof(SVGFEColorMatrixElement))&&2==SVGFEColorMatrixElement.SVG_FECOLORMATRIX_TYPE_SATURATE}catch(t){}return t}()},y=!1,b=function(t){if(m[t]||""===m[t])return m[t]+t;var n=e.createElement("div"),i=["","Moz","Webkit","O","ms","Khtml"];for(var r in i)if(void 0!==n.style[i[r]+t])return m[t]=i[r],i[r]+t;return t.toLowerCase()}("Filter"),p=function(t){return e.createElementNS("http://www.w3.org/2000/svg",t)},v=function(){var t=p("svg"),e=p("filter");u=p("feGaussianBlur"),t.setAttribute("style","position:absolute"),t.setAttribute("width","0"),t.setAttribute("height","0"),e.setAttribute("id","blur-effect-id-"+i.filterId),e.appendChild(u),t.appendChild(e),r.append(t)};return this.$elm=o instanceof n?o:n(o),this.init=function(){return h.svgfilters&&v(),l=i.filterId,i.filterId++,this},this.blur=function(){var e,n=t.location,i=c.forceSVGUrl?n.protocol+"//"+n.host+n.pathname+n.search:"";return h.cssfilters?e="blur("+c.intensity+"px)":h.svgfilters?(u.setAttribute("stdDeviation",c.intensity),e="url("+i+"#blur-effect-id-"+l+")"):e="progid:DXImageTransform.Microsoft.Blur(pixelradius="+c.intensity+")",this.$elm[0].style[b]=e,y=!0,this},this.animate=function(t,e){if("number"!=typeof t)throw(void 0===t?"undefined":_typeof(t))+" is not a valid number to animate the blur";if(t<0)throw"I can animate only positive numbers";var i=new n.Deferred;return f&&f.stop(!0,!0),f=new n.Animation(c,{intensity:t},n.extend(c.animationOptions,e)).progress(n.proxy(this.blur,this)).done(i.resolve),i.promise()},this.unblur=function(){return this.$elm.css(b,"none"),y=!1,this},this.toggleblur=function(){return y?this.unblur():this.blur(),this},this.destroy=function(){h.svgfilters&&n("filter#blur-effect-id-"+l).parent().remove(),this.unblur();for(var t in this)delete this[t];return this},this.init()};n.fn.Vague=function(t){return new o(this,t)}}(window,document,jQuery),function(){var t=document.body,e=document.getElementsByClassName("b-menu")[0],n=document.getElementsByClassName("b-container")[0],i=document.getElementsByClassName("b-nav")[0];e.addEventListener("click",function(){[t,n,i].forEach(function(t){t.classList.toggle("open")})},!1)}(),$(document).ready(function(){$(".b-menu").on("click",function(){$(".container-fluid").toggleClass("blur")})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
