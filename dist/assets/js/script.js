"use strict";!function(){var e=document.body,t=document.getElementsByClassName("b-menu")[0],n=document.getElementsByClassName("b-container")[0],a=document.getElementsByClassName("b-nav")[0];t.addEventListener("click",function(){[e,n,a].forEach(function(e){e.classList.toggle("open")})},!1),$(".b-link").on("click",function(){$(e).removeClass("open"),$(".b-menu, .b-container, .b-nav").removeClass("open"),$(".landing-page").removeClass("blur")})}(),$(document).ready(function(){function e(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}$(".b-menu").on("click",function(){$(".landing-page").toggleClass("blur")}),setTimeout(function(){$("#main").removeClass("is-loading")},200),new Instafeed({get:"user",userId:"2099259904",clientId:"fc1efb2efb724a1d9f5cf56292fcadea",accessToken:"2099259904.1677ed0.62e0f96bf6f947e9bbc44d329f0d08c3",limit:10,resolution:"standard_resolution",template:'<div class="item" style="background:url({{image}}); background-size: cover; background-position: center;"><p class="item-description mr-2 text-center">{{caption}}</p></div>',after:function(){$(".item").each(function(){switch(Math.floor(2*Math.random()+1)){case 1:$(this).addClass("item--medium");break;case 2:$(this).addClass("item--large")}})}}).run(),$(".item").hover(function(){console.log("hover"),$(".item-description",this).addClass("show")},function(){$(".item-description",this).removeClass("show")}),$('a[href*="#"]').not('[href="#"]').not('[href="#0"]').click(function(e){if(location.pathname.replace(/^\//,"")==this.pathname.replace(/^\//,"")&&location.hostname==this.hostname){var t=$(this.hash);t=t.length?t:$("[name="+this.hash.slice(1)+"]"),t.length&&(e.preventDefault(),$("html, body").animate({scrollTop:t.offset().top},1e3,function(){var e=$(t);if(e.focus(),e.is(":focus"))return!1;e.attr("tabindex","-1"),e.focus()}))}});var t=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),n=function(){function n(t){e(this,n),this.el=t,this.chars="!<>-_\\/[]{}â€”=+*^?#________",this.update=this.update.bind(this)}return t(n,[{key:"setText",value:function(e){var t=this,n=this.el.innerText,a=Math.max(n.length,e.length),i=new Promise(function(e){return t.resolve=e});this.queue=[];for(var o=0;o<a;o++){var r=n[o]||"",s=e[o]||"",c=Math.floor(40*Math.random()),u=c+Math.floor(40*Math.random());this.queue.push({from:r,to:s,start:c,end:u})}return cancelAnimationFrame(this.frameRequest),this.frame=0,this.update(),i}},{key:"update",value:function(){for(var e="",t=0,n=0,a=this.queue.length;n<a;n++){var i=this.queue[n],o=i.from,r=i.to,s=i.start,c=i.end,u=i.char;this.frame>=c?(t++,e+=r):this.frame>=s?((!u||Math.random()<.28)&&(u=this.randomChar(),this.queue[n].char=u),e+='<span class="dud">'+u+"</span>"):e+=o}this.el.innerHTML=e,t===this.queue.length?this.resolve():(this.frameRequest=requestAnimationFrame(this.update),this.frame++)}},{key:"randomChar",value:function(){return this.chars[Math.floor(Math.random()*this.chars.length)]}}]),n}(),a=["Dragan Balatinac","trainee frontend developer","trainee backend developer","photography","guitar / drums"],i=document.querySelector(".text"),o=new n(i),r=0;!function e(){o.setText(a[r]).then(function(){setTimeout(e,800)}),r=(r+1)%a.length}()});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
