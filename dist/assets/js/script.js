"use strict";var _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t};!function(t,e){"object"===("undefined"==typeof exports?"undefined":_typeof(exports))&&"undefined"!=typeof module?e(exports,require("jquery")):"function"==typeof define&&define.amd?define(["exports","jquery"],e):e(t.bootstrap={},t.jQuery)}(void 0,function(t,e){function n(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}function i(t,e,i){return e&&n(t.prototype,e),i&&n(t,i),t}function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function o(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{},i=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(i=i.concat(Object.getOwnPropertySymbols(n).filter(function(t){return Object.getOwnPropertyDescriptor(n,t).enumerable}))),i.forEach(function(e){r(t,e,n[e])})}return t}function s(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}function a(t){var e=!1;return function(){e||(e=!0,window.Promise.resolve().then(function(){e=!1,t()}))}}function l(t){var e=!1;return function(){e||(e=!0,setTimeout(function(){e=!1,t()},yt))}}function c(t){var e={};return t&&"[object Function]"===e.toString.call(t)}function u(t,e){if(1!==t.nodeType)return[];var n=getComputedStyle(t,null);return e?n[e]:n}function h(t){return"HTML"===t.nodeName?t:t.parentNode||t.host}function f(t){if(!t)return document.body;switch(t.nodeName){case"HTML":case"BODY":return t.ownerDocument.body;case"#document":return t.body}var e=u(t),n=e.overflow,i=e.overflowX;return/(auto|scroll|overlay)/.test(n+e.overflowY+i)?t:f(h(t))}function d(t){return 11===t?Ct:10===t?St:Ct||St}function g(t){if(!t)return document.documentElement;for(var e=d(10)?document.body:null,n=t.offsetParent;n===e&&t.nextElementSibling;)n=(t=t.nextElementSibling).offsetParent;var i=n&&n.nodeName;return i&&"BODY"!==i&&"HTML"!==i?-1!==["TD","TABLE"].indexOf(n.nodeName)&&"static"===u(n,"position")?g(n):n:t?t.ownerDocument.documentElement:document.documentElement}function p(t){var e=t.nodeName;return"BODY"!==e&&("HTML"===e||g(t.firstElementChild)===t)}function m(t){return null!==t.parentNode?m(t.parentNode):t}function _(t,e){if(!(t&&t.nodeType&&e&&e.nodeType))return document.documentElement;var n=t.compareDocumentPosition(e)&Node.DOCUMENT_POSITION_FOLLOWING,i=n?t:e,r=n?e:t,o=document.createRange();o.setStart(i,0),o.setEnd(r,0);var s=o.commonAncestorContainer;if(t!==s&&e!==s||i.contains(r))return p(s)?s:g(s);var a=m(t);return a.host?_(a.host,e):_(t,m(e).host)}function v(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"top",n="top"===e?"scrollTop":"scrollLeft",i=t.nodeName;if("BODY"===i||"HTML"===i){var r=t.ownerDocument.documentElement;return(t.ownerDocument.scrollingElement||r)[n]}return t[n]}function E(t,e){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],i=v(e,"top"),r=v(e,"left"),o=n?-1:1;return t.top+=i*o,t.bottom+=i*o,t.left+=r*o,t.right+=r*o,t}function T(t,e){var n="x"===e?"Left":"Top",i="Left"===n?"Right":"Bottom";return parseFloat(t["border"+n+"Width"],10)+parseFloat(t["border"+i+"Width"],10)}function y(t,e,n,i){return Math.max(e["offset"+t],e["scroll"+t],n["client"+t],n["offset"+t],n["scroll"+t],d(10)?n["offset"+t]+i["margin"+("Height"===t?"Top":"Left")]+i["margin"+("Height"===t?"Bottom":"Right")]:0)}function A(){var t=document.body,e=document.documentElement,n=d(10)&&getComputedStyle(e);return{height:y("Height",t,e,n),width:y("Width",t,e,n)}}function I(t){return wt({},t,{right:t.left+t.width,bottom:t.top+t.height})}function b(t){var e={};try{if(d(10)){e=t.getBoundingClientRect();var n=v(t,"top"),i=v(t,"left");e.top+=n,e.left+=i,e.bottom+=n,e.right+=i}else e=t.getBoundingClientRect()}catch(t){}var r={left:e.left,top:e.top,width:e.right-e.left,height:e.bottom-e.top},o="HTML"===t.nodeName?A():{},s=o.width||t.clientWidth||r.right-r.left,a=o.height||t.clientHeight||r.bottom-r.top,l=t.offsetWidth-s,c=t.offsetHeight-a;if(l||c){var h=u(t);l-=T(h,"x"),c-=T(h,"y"),r.width-=l,r.height-=c}return I(r)}function C(t,e){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],i=d(10),r="HTML"===e.nodeName,o=b(t),s=b(e),a=f(t),l=u(e),c=parseFloat(l.borderTopWidth,10),h=parseFloat(l.borderLeftWidth,10);n&&"HTML"===e.nodeName&&(s.top=Math.max(s.top,0),s.left=Math.max(s.left,0));var g=I({top:o.top-s.top-c,left:o.left-s.left-h,width:o.width,height:o.height});if(g.marginTop=0,g.marginLeft=0,!i&&r){var p=parseFloat(l.marginTop,10),m=parseFloat(l.marginLeft,10);g.top-=c-p,g.bottom-=c-p,g.left-=h-m,g.right-=h-m,g.marginTop=p,g.marginLeft=m}return(i&&!n?e.contains(a):e===a&&"BODY"!==a.nodeName)&&(g=E(g,e)),g}function S(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=t.ownerDocument.documentElement,i=C(t,n),r=Math.max(n.clientWidth,window.innerWidth||0),o=Math.max(n.clientHeight,window.innerHeight||0),s=e?0:v(n),a=e?0:v(n,"left");return I({top:s-i.top+i.marginTop,left:a-i.left+i.marginLeft,width:r,height:o})}function O(t){var e=t.nodeName;return"BODY"!==e&&"HTML"!==e&&("fixed"===u(t,"position")||O(h(t)))}function D(t){if(!t||!t.parentElement||d())return document.documentElement;for(var e=t.parentElement;e&&"none"===u(e,"transform");)e=e.parentElement;return e||document.documentElement}function N(t,e,n,i){var r=arguments.length>4&&void 0!==arguments[4]&&arguments[4],o={top:0,left:0},s=r?D(t):_(t,e);if("viewport"===i)o=S(s,r);else{var a=void 0;"scrollParent"===i?(a=f(h(e)),"BODY"===a.nodeName&&(a=t.ownerDocument.documentElement)):a="window"===i?t.ownerDocument.documentElement:i;var l=C(a,s,r);if("HTML"!==a.nodeName||O(s))o=l;else{var c=A(),u=c.height,d=c.width;o.top+=l.top-l.marginTop,o.bottom=u+l.top,o.left+=l.left-l.marginLeft,o.right=d+l.left}}return o.left+=n,o.top+=n,o.right-=n,o.bottom-=n,o}function w(t){return t.width*t.height}function L(t,e,n,i,r){var o=arguments.length>5&&void 0!==arguments[5]?arguments[5]:0;if(-1===t.indexOf("auto"))return t;var s=N(n,i,o,r),a={top:{width:s.width,height:e.top-s.top},right:{width:s.right-e.right,height:s.height},bottom:{width:s.width,height:s.bottom-e.bottom},left:{width:e.left-s.left,height:s.height}},l=Object.keys(a).map(function(t){return wt({key:t},a[t],{area:w(a[t])})}).sort(function(t,e){return e.area-t.area}),c=l.filter(function(t){var e=t.width,i=t.height;return e>=n.clientWidth&&i>=n.clientHeight}),u=c.length>0?c[0].key:l[0].key,h=t.split("-")[1];return u+(h?"-"+h:"")}function P(t,e,n){var i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null;return C(n,i?D(e):_(e,n),i)}function R(t){var e=getComputedStyle(t),n=parseFloat(e.marginTop)+parseFloat(e.marginBottom),i=parseFloat(e.marginLeft)+parseFloat(e.marginRight);return{width:t.offsetWidth+i,height:t.offsetHeight+n}}function H(t){var e={left:"right",right:"left",bottom:"top",top:"bottom"};return t.replace(/left|right|bottom|top/g,function(t){return e[t]})}function k(t,e,n){n=n.split("-")[0];var i=R(t),r={width:i.width,height:i.height},o=-1!==["right","left"].indexOf(n),s=o?"top":"left",a=o?"left":"top",l=o?"height":"width",c=o?"width":"height";return r[s]=e[s]+e[l]/2-i[l]/2,r[a]=n===a?e[a]-i[c]:e[H(a)],r}function W(t,e){return Array.prototype.find?t.find(e):t.filter(e)[0]}function F(t,e,n){if(Array.prototype.findIndex)return t.findIndex(function(t){return t[e]===n});var i=W(t,function(t){return t[e]===n});return t.indexOf(i)}function M(t,e,n){return(void 0===n?t:t.slice(0,F(t,"name",n))).forEach(function(t){t.function&&console.warn("`modifier.function` is deprecated, use `modifier.fn`!");var n=t.function||t.fn;t.enabled&&c(n)&&(e.offsets.popper=I(e.offsets.popper),e.offsets.reference=I(e.offsets.reference),e=n(e,t))}),e}function U(){if(!this.state.isDestroyed){var t={instance:this,styles:{},arrowStyles:{},attributes:{},flipped:!1,offsets:{}};t.offsets.reference=P(this.state,this.popper,this.reference,this.options.positionFixed),t.placement=L(this.options.placement,t.offsets.reference,this.popper,this.reference,this.options.modifiers.flip.boundariesElement,this.options.modifiers.flip.padding),t.originalPlacement=t.placement,t.positionFixed=this.options.positionFixed,t.offsets.popper=k(this.popper,t.offsets.reference,t.placement),t.offsets.popper.position=this.options.positionFixed?"fixed":"absolute",t=M(this.modifiers,t),this.state.isCreated?this.options.onUpdate(t):(this.state.isCreated=!0,this.options.onCreate(t))}}function V(t,e){return t.some(function(t){var n=t.name;return t.enabled&&n===e})}function j(t){for(var e=[!1,"ms","Webkit","Moz","O"],n=t.charAt(0).toUpperCase()+t.slice(1),i=0;i<e.length;i++){var r=e[i],o=r?""+r+n:t;if(void 0!==document.body.style[o])return o}return null}function x(){return this.state.isDestroyed=!0,V(this.modifiers,"applyStyle")&&(this.popper.removeAttribute("x-placement"),this.popper.style.position="",this.popper.style.top="",this.popper.style.left="",this.popper.style.right="",this.popper.style.bottom="",this.popper.style.willChange="",this.popper.style[j("transform")]=""),this.disableEventListeners(),this.options.removeOnDestroy&&this.popper.parentNode.removeChild(this.popper),this}function G(t){var e=t.ownerDocument;return e?e.defaultView:window}function B(t,e,n,i){var r="BODY"===t.nodeName,o=r?t.ownerDocument.defaultView:t;o.addEventListener(e,n,{passive:!0}),r||B(f(o.parentNode),e,n,i),i.push(o)}function K(t,e,n,i){n.updateBound=i,G(t).addEventListener("resize",n.updateBound,{passive:!0});var r=f(t);return B(r,"scroll",n.updateBound,n.scrollParents),n.scrollElement=r,n.eventsEnabled=!0,n}function q(){this.state.eventsEnabled||(this.state=K(this.reference,this.options,this.state,this.scheduleUpdate))}function Q(t,e){return G(t).removeEventListener("resize",e.updateBound),e.scrollParents.forEach(function(t){t.removeEventListener("scroll",e.updateBound)}),e.updateBound=null,e.scrollParents=[],e.scrollElement=null,e.eventsEnabled=!1,e}function Y(){this.state.eventsEnabled&&(cancelAnimationFrame(this.scheduleUpdate),this.state=Q(this.reference,this.state))}function X(t){return""!==t&&!isNaN(parseFloat(t))&&isFinite(t)}function z(t,e){Object.keys(e).forEach(function(n){var i="";-1!==["width","height","top","right","bottom","left"].indexOf(n)&&X(e[n])&&(i="px"),t.style[n]=e[n]+i})}function J(t,e){Object.keys(e).forEach(function(n){!1!==e[n]?t.setAttribute(n,e[n]):t.removeAttribute(n)})}function Z(t){return z(t.instance.popper,t.styles),J(t.instance.popper,t.attributes),t.arrowElement&&Object.keys(t.arrowStyles).length&&z(t.arrowElement,t.arrowStyles),t}function $(t,e,n,i,r){var o=P(r,e,t,n.positionFixed),s=L(n.placement,o,e,t,n.modifiers.flip.boundariesElement,n.modifiers.flip.padding);return e.setAttribute("x-placement",s),z(e,{position:n.positionFixed?"fixed":"absolute"}),n}function tt(t,e){var n=e.x,i=e.y,r=t.offsets.popper,o=W(t.instance.modifiers,function(t){return"applyStyle"===t.name}).gpuAcceleration;void 0!==o&&console.warn("WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!");var s=void 0!==o?o:e.gpuAcceleration,a=g(t.instance.popper),l=b(a),c={position:r.position},u={left:Math.floor(r.left),top:Math.round(r.top),bottom:Math.round(r.bottom),right:Math.floor(r.right)},h="bottom"===n?"top":"bottom",f="right"===i?"left":"right",d=j("transform"),p=void 0,m=void 0;if(m="bottom"===h?-l.height+u.bottom:u.top,p="right"===f?-l.width+u.right:u.left,s&&d)c[d]="translate3d("+p+"px, "+m+"px, 0)",c[h]=0,c[f]=0,c.willChange="transform";else{var _="bottom"===h?-1:1,v="right"===f?-1:1;c[h]=m*_,c[f]=p*v,c.willChange=h+", "+f}var E={"x-placement":t.placement};return t.attributes=wt({},E,t.attributes),t.styles=wt({},c,t.styles),t.arrowStyles=wt({},t.offsets.arrow,t.arrowStyles),t}function et(t,e,n){var i=W(t,function(t){return t.name===e}),r=!!i&&t.some(function(t){return t.name===n&&t.enabled&&t.order<i.order});if(!r){var o="`"+e+"`",s="`"+n+"`";console.warn(s+" modifier is required by "+o+" modifier in order to work, be sure to include it before "+o+"!")}return r}function nt(t,e){var n;if(!et(t.instance.modifiers,"arrow","keepTogether"))return t;var i=e.element;if("string"==typeof i){if(!(i=t.instance.popper.querySelector(i)))return t}else if(!t.instance.popper.contains(i))return console.warn("WARNING: `arrow.element` must be child of its popper element!"),t;var r=t.placement.split("-")[0],o=t.offsets,s=o.popper,a=o.reference,l=-1!==["left","right"].indexOf(r),c=l?"height":"width",h=l?"Top":"Left",f=h.toLowerCase(),d=l?"left":"top",g=l?"bottom":"right",p=R(i)[c];a[g]-p<s[f]&&(t.offsets.popper[f]-=s[f]-(a[g]-p)),a[f]+p>s[g]&&(t.offsets.popper[f]+=a[f]+p-s[g]),t.offsets.popper=I(t.offsets.popper);var m=a[f]+a[c]/2-p/2,_=u(t.instance.popper),v=parseFloat(_["margin"+h],10),E=parseFloat(_["border"+h+"Width"],10),T=m-t.offsets.popper[f]-v-E;return T=Math.max(Math.min(s[c]-p,T),0),t.arrowElement=i,t.offsets.arrow=(n={},Nt(n,f,Math.round(T)),Nt(n,d,""),n),t}function it(t){return"end"===t?"start":"start"===t?"end":t}function rt(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=Pt.indexOf(t),i=Pt.slice(n+1).concat(Pt.slice(0,n));return e?i.reverse():i}function ot(t,e){if(V(t.instance.modifiers,"inner"))return t;if(t.flipped&&t.placement===t.originalPlacement)return t;var n=N(t.instance.popper,t.instance.reference,e.padding,e.boundariesElement,t.positionFixed),i=t.placement.split("-")[0],r=H(i),o=t.placement.split("-")[1]||"",s=[];switch(e.behavior){case Rt.FLIP:s=[i,r];break;case Rt.CLOCKWISE:s=rt(i);break;case Rt.COUNTERCLOCKWISE:s=rt(i,!0);break;default:s=e.behavior}return s.forEach(function(a,l){if(i!==a||s.length===l+1)return t;i=t.placement.split("-")[0],r=H(i);var c=t.offsets.popper,u=t.offsets.reference,h=Math.floor,f="left"===i&&h(c.right)>h(u.left)||"right"===i&&h(c.left)<h(u.right)||"top"===i&&h(c.bottom)>h(u.top)||"bottom"===i&&h(c.top)<h(u.bottom),d=h(c.left)<h(n.left),g=h(c.right)>h(n.right),p=h(c.top)<h(n.top),m=h(c.bottom)>h(n.bottom),_="left"===i&&d||"right"===i&&g||"top"===i&&p||"bottom"===i&&m,v=-1!==["top","bottom"].indexOf(i),E=!!e.flipVariations&&(v&&"start"===o&&d||v&&"end"===o&&g||!v&&"start"===o&&p||!v&&"end"===o&&m);(f||_||E)&&(t.flipped=!0,(f||_)&&(i=s[l+1]),E&&(o=it(o)),t.placement=i+(o?"-"+o:""),t.offsets.popper=wt({},t.offsets.popper,k(t.instance.popper,t.offsets.reference,t.placement)),t=M(t.instance.modifiers,t,"flip"))}),t}function st(t){var e=t.offsets,n=e.popper,i=e.reference,r=t.placement.split("-")[0],o=Math.floor,s=-1!==["top","bottom"].indexOf(r),a=s?"right":"bottom",l=s?"left":"top",c=s?"width":"height";return n[a]<o(i[l])&&(t.offsets.popper[l]=o(i[l])-n[c]),n[l]>o(i[a])&&(t.offsets.popper[l]=o(i[a])),t}function at(t,e,n,i){var r=t.match(/((?:\-|\+)?\d*\.?\d*)(.*)/),o=+r[1],s=r[2];if(!o)return t;if(0===s.indexOf("%")){var a=void 0;switch(s){case"%p":a=n;break;case"%":case"%r":default:a=i}return I(a)[e]/100*o}if("vh"===s||"vw"===s){return("vh"===s?Math.max(document.documentElement.clientHeight,window.innerHeight||0):Math.max(document.documentElement.clientWidth,window.innerWidth||0))/100*o}return o}function lt(t,e,n,i){var r=[0,0],o=-1!==["right","left"].indexOf(i),s=t.split(/(\+|\-)/).map(function(t){return t.trim()}),a=s.indexOf(W(s,function(t){return-1!==t.search(/,|\s/)}));s[a]&&-1===s[a].indexOf(",")&&console.warn("Offsets separated by white space(s) are deprecated, use a comma (,) instead.");var l=/\s*,\s*|\s+/,c=-1!==a?[s.slice(0,a).concat([s[a].split(l)[0]]),[s[a].split(l)[1]].concat(s.slice(a+1))]:[s];return c=c.map(function(t,i){var r=(1===i?!o:o)?"height":"width",s=!1;return t.reduce(function(t,e){return""===t[t.length-1]&&-1!==["+","-"].indexOf(e)?(t[t.length-1]=e,s=!0,t):s?(t[t.length-1]+=e,s=!1,t):t.concat(e)},[]).map(function(t){return at(t,r,e,n)})}),c.forEach(function(t,e){t.forEach(function(n,i){X(n)&&(r[e]+=n*("-"===t[i-1]?-1:1))})}),r}function ct(t,e){var n=e.offset,i=t.placement,r=t.offsets,o=r.popper,s=r.reference,a=i.split("-")[0],l=void 0;return l=X(+n)?[+n,0]:lt(n,o,s,a),"left"===a?(o.top+=l[0],o.left-=l[1]):"right"===a?(o.top+=l[0],o.left+=l[1]):"top"===a?(o.left+=l[0],o.top-=l[1]):"bottom"===a&&(o.left+=l[0],o.top+=l[1]),t.popper=o,t}function ut(t,e){var n=e.boundariesElement||g(t.instance.popper);t.instance.reference===n&&(n=g(n));var i=j("transform"),r=t.instance.popper.style,o=r.top,s=r.left,a=r[i];r.top="",r.left="",r[i]="";var l=N(t.instance.popper,t.instance.reference,e.padding,n,t.positionFixed);r.top=o,r.left=s,r[i]=a,e.boundaries=l;var c=e.priority,u=t.offsets.popper,h={primary:function(t){var n=u[t];return u[t]<l[t]&&!e.escapeWithReference&&(n=Math.max(u[t],l[t])),Nt({},t,n)},secondary:function(t){var n="right"===t?"left":"top",i=u[n];return u[t]>l[t]&&!e.escapeWithReference&&(i=Math.min(u[n],l[t]-("right"===t?u.width:u.height))),Nt({},n,i)}};return c.forEach(function(t){var e=-1!==["left","top"].indexOf(t)?"primary":"secondary";u=wt({},u,h[e](t))}),t.offsets.popper=u,t}function ht(t){var e=t.placement,n=e.split("-")[0],i=e.split("-")[1];if(i){var r=t.offsets,o=r.reference,s=r.popper,a=-1!==["bottom","top"].indexOf(n),l=a?"left":"top",c=a?"width":"height",u={start:Nt({},l,o[l]),end:Nt({},l,o[l]+o[c]-s[c])};t.offsets.popper=wt({},s,u[i])}return t}function ft(t){if(!et(t.instance.modifiers,"hide","preventOverflow"))return t;var e=t.offsets.reference,n=W(t.instance.modifiers,function(t){return"preventOverflow"===t.name}).boundaries;if(e.bottom<n.top||e.left>n.right||e.top>n.bottom||e.right<n.left){if(!0===t.hide)return t;t.hide=!0,t.attributes["x-out-of-boundaries"]=""}else{if(!1===t.hide)return t;t.hide=!1,t.attributes["x-out-of-boundaries"]=!1}return t}function dt(t){var e=t.placement,n=e.split("-")[0],i=t.offsets,r=i.popper,o=i.reference,s=-1!==["left","right"].indexOf(n),a=-1===["top","left"].indexOf(n);return r[s?"left":"top"]=o[n]-(a?r[s?"width":"height"]:0),t.placement=H(e),t.offsets.popper=I(r),t}e=e&&e.hasOwnProperty("default")?e.default:e;for(var gt=function(t){function e(t){return{}.toString.call(t).match(/\s([a-z]+)/i)[1].toLowerCase()}function n(){return{bindType:r,delegateType:r,handle:function(e){if(t(e.target).is(this))return e.handleObj.handler.apply(this,arguments)}}}function i(e){var n=this,i=!1;return t(this).one(o.TRANSITION_END,function(){i=!0}),setTimeout(function(){i||o.triggerTransitionEnd(n)},e),this}var r="transitionend",o={TRANSITION_END:"bsTransitionEnd",getUID:function(t){do{t+=~~(1e6*Math.random())}while(document.getElementById(t));return t},getSelectorFromElement:function(t){var e=t.getAttribute("data-target");e&&"#"!==e||(e=t.getAttribute("href")||"");try{return document.querySelector(e)?e:null}catch(t){return null}},getTransitionDurationFromElement:function(e){if(!e)return 0;var n=t(e).css("transition-duration");return parseFloat(n)?(n=n.split(",")[0],1e3*parseFloat(n)):0},reflow:function(t){return t.offsetHeight},triggerTransitionEnd:function(e){t(e).trigger(r)},supportsTransitionEnd:function(){return Boolean(r)},isElement:function(t){return(t[0]||t).nodeType},typeCheckConfig:function(t,n,i){for(var r in i)if(Object.prototype.hasOwnProperty.call(i,r)){var s=i[r],a=n[r],l=a&&o.isElement(a)?"element":e(a);if(!new RegExp(s).test(l))throw new Error(t.toUpperCase()+': Option "'+r+'" provided type "'+l+'" but expected type "'+s+'".')}}};return function(){t.fn.emulateTransitionEnd=i,t.event.special[o.TRANSITION_END]=n()}(),o}(e),pt=function(t){var e="alert",n=t.fn[e],r={DISMISS:'[data-dismiss="alert"]'},o={CLOSE:"close.bs.alert",CLOSED:"closed.bs.alert",CLICK_DATA_API:"click.bs.alert.data-api"},s={ALERT:"alert",FADE:"fade",SHOW:"show"},a=function(){function e(t){this._element=t}var n=e.prototype;return n.close=function(t){var e=this._element;t&&(e=this._getRootElement(t)),this._triggerCloseEvent(e).isDefaultPrevented()||this._removeElement(e)},n.dispose=function(){t.removeData(this._element,"bs.alert"),this._element=null},n._getRootElement=function(e){var n=gt.getSelectorFromElement(e),i=!1;return n&&(i=document.querySelector(n)),i||(i=t(e).closest("."+s.ALERT)[0]),i},n._triggerCloseEvent=function(e){var n=t.Event(o.CLOSE);return t(e).trigger(n),n},n._removeElement=function(e){var n=this;if(t(e).removeClass(s.SHOW),!t(e).hasClass(s.FADE))return void this._destroyElement(e);var i=gt.getTransitionDurationFromElement(e);t(e).one(gt.TRANSITION_END,function(t){return n._destroyElement(e,t)}).emulateTransitionEnd(i)},n._destroyElement=function(e){t(e).detach().trigger(o.CLOSED).remove()},e._jQueryInterface=function(n){return this.each(function(){var i=t(this),r=i.data("bs.alert");r||(r=new e(this),i.data("bs.alert",r)),"close"===n&&r[n](this)})},e._handleDismiss=function(t){return function(e){e&&e.preventDefault(),t.close(this)}},i(e,null,[{key:"VERSION",get:function(){return"4.1.2"}}]),e}();return t(document).on(o.CLICK_DATA_API,r.DISMISS,a._handleDismiss(new a)),t.fn[e]=a._jQueryInterface,t.fn[e].Constructor=a,t.fn[e].noConflict=function(){return t.fn[e]=n,a._jQueryInterface},a}(e),mt=function(t){var e="button",n=t.fn[e],r={ACTIVE:"active",BUTTON:"btn",FOCUS:"focus"},o={DATA_TOGGLE_CARROT:'[data-toggle^="button"]',DATA_TOGGLE:'[data-toggle="buttons"]',INPUT:"input",ACTIVE:".active",BUTTON:".btn"},s={CLICK_DATA_API:"click.bs.button.data-api",FOCUS_BLUR_DATA_API:"focus.bs.button.data-api blur.bs.button.data-api"},a=function(){function e(t){this._element=t}var n=e.prototype;return n.toggle=function(){var e=!0,n=!0,i=t(this._element).closest(o.DATA_TOGGLE)[0];if(i){var s=this._element.querySelector(o.INPUT);if(s){if("radio"===s.type)if(s.checked&&this._element.classList.contains(r.ACTIVE))e=!1;else{var a=i.querySelector(o.ACTIVE);a&&t(a).removeClass(r.ACTIVE)}if(e){if(s.hasAttribute("disabled")||i.hasAttribute("disabled")||s.classList.contains("disabled")||i.classList.contains("disabled"))return;s.checked=!this._element.classList.contains(r.ACTIVE),t(s).trigger("change")}s.focus(),n=!1}}n&&this._element.setAttribute("aria-pressed",!this._element.classList.contains(r.ACTIVE)),e&&t(this._element).toggleClass(r.ACTIVE)},n.dispose=function(){t.removeData(this._element,"bs.button"),this._element=null},e._jQueryInterface=function(n){return this.each(function(){var i=t(this).data("bs.button");i||(i=new e(this),t(this).data("bs.button",i)),"toggle"===n&&i[n]()})},i(e,null,[{key:"VERSION",get:function(){return"4.1.2"}}]),e}();return t(document).on(s.CLICK_DATA_API,o.DATA_TOGGLE_CARROT,function(e){e.preventDefault();var n=e.target;t(n).hasClass(r.BUTTON)||(n=t(n).closest(o.BUTTON)),a._jQueryInterface.call(t(n),"toggle")}).on(s.FOCUS_BLUR_DATA_API,o.DATA_TOGGLE_CARROT,function(e){var n=t(e.target).closest(o.BUTTON)[0];t(n).toggleClass(r.FOCUS,/^focus(in)?$/.test(e.type))}),t.fn[e]=a._jQueryInterface,t.fn[e].Constructor=a,t.fn[e].noConflict=function(){return t.fn[e]=n,a._jQueryInterface},a}(e),_t=(function(t){var e="carousel",n="bs.carousel",r="."+n,s=t.fn[e],a={interval:5e3,keyboard:!0,slide:!1,pause:"hover",wrap:!0},l={interval:"(number|boolean)",keyboard:"boolean",slide:"(boolean|string)",pause:"(string|boolean)",wrap:"boolean"},c={NEXT:"next",PREV:"prev",LEFT:"left",RIGHT:"right"},u={SLIDE:"slide"+r,SLID:"slid"+r,KEYDOWN:"keydown"+r,MOUSEENTER:"mouseenter"+r,MOUSELEAVE:"mouseleave"+r,TOUCHEND:"touchend"+r,LOAD_DATA_API:"load.bs.carousel.data-api",CLICK_DATA_API:"click.bs.carousel.data-api"},h={CAROUSEL:"carousel",ACTIVE:"active",SLIDE:"slide",RIGHT:"carousel-item-right",LEFT:"carousel-item-left",NEXT:"carousel-item-next",PREV:"carousel-item-prev",ITEM:"carousel-item"},f={ACTIVE:".active",ACTIVE_ITEM:".active.carousel-item",ITEM:".carousel-item",NEXT_PREV:".carousel-item-next, .carousel-item-prev",INDICATORS:".carousel-indicators",DATA_SLIDE:"[data-slide], [data-slide-to]",DATA_RIDE:'[data-ride="carousel"]'},d=function(){function s(e,n){this._items=null,this._interval=null,this._activeElement=null,this._isPaused=!1,this._isSliding=!1,this.touchTimeout=null,this._config=this._getConfig(n),this._element=t(e)[0],this._indicatorsElement=this._element.querySelector(f.INDICATORS),this._addEventListeners()}var d=s.prototype;return d.next=function(){this._isSliding||this._slide(c.NEXT)},d.nextWhenVisible=function(){!document.hidden&&t(this._element).is(":visible")&&"hidden"!==t(this._element).css("visibility")&&this.next()},d.prev=function(){this._isSliding||this._slide(c.PREV)},d.pause=function(t){t||(this._isPaused=!0),this._element.querySelector(f.NEXT_PREV)&&(gt.triggerTransitionEnd(this._element),this.cycle(!0)),clearInterval(this._interval),this._interval=null},d.cycle=function(t){t||(this._isPaused=!1),this._interval&&(clearInterval(this._interval),this._interval=null),this._config.interval&&!this._isPaused&&(this._interval=setInterval((document.visibilityState?this.nextWhenVisible:this.next).bind(this),this._config.interval))},d.to=function(e){var n=this;this._activeElement=this._element.querySelector(f.ACTIVE_ITEM);var i=this._getItemIndex(this._activeElement);if(!(e>this._items.length-1||e<0)){if(this._isSliding)return void t(this._element).one(u.SLID,function(){return n.to(e)});if(i===e)return this.pause(),void this.cycle();var r=e>i?c.NEXT:c.PREV;this._slide(r,this._items[e])}},d.dispose=function(){t(this._element).off(r),t.removeData(this._element,n),this._items=null,this._config=null,this._element=null,this._interval=null,this._isPaused=null,this._isSliding=null,this._activeElement=null,this._indicatorsElement=null},d._getConfig=function(t){return t=o({},a,t),gt.typeCheckConfig(e,t,l),t},d._addEventListeners=function(){var e=this;this._config.keyboard&&t(this._element).on(u.KEYDOWN,function(t){return e._keydown(t)}),"hover"===this._config.pause&&(t(this._element).on(u.MOUSEENTER,function(t){return e.pause(t)}).on(u.MOUSELEAVE,function(t){return e.cycle(t)}),"ontouchstart"in document.documentElement&&t(this._element).on(u.TOUCHEND,function(){e.pause(),e.touchTimeout&&clearTimeout(e.touchTimeout),e.touchTimeout=setTimeout(function(t){return e.cycle(t)},500+e._config.interval)}))},d._keydown=function(t){if(!/input|textarea/i.test(t.target.tagName))switch(t.which){case 37:t.preventDefault(),this.prev();break;case 39:t.preventDefault(),this.next()}},d._getItemIndex=function(t){return this._items=t&&t.parentNode?[].slice.call(t.parentNode.querySelectorAll(f.ITEM)):[],this._items.indexOf(t)},d._getItemByDirection=function(t,e){var n=t===c.NEXT,i=t===c.PREV,r=this._getItemIndex(e),o=this._items.length-1;if((i&&0===r||n&&r===o)&&!this._config.wrap)return e;var s=t===c.PREV?-1:1,a=(r+s)%this._items.length;return-1===a?this._items[this._items.length-1]:this._items[a]},d._triggerSlideEvent=function(e,n){var i=this._getItemIndex(e),r=this._getItemIndex(this._element.querySelector(f.ACTIVE_ITEM)),o=t.Event(u.SLIDE,{relatedTarget:e,direction:n,from:r,to:i});return t(this._element).trigger(o),o},d._setActiveIndicatorElement=function(e){if(this._indicatorsElement){var n=[].slice.call(this._indicatorsElement.querySelectorAll(f.ACTIVE));t(n).removeClass(h.ACTIVE);var i=this._indicatorsElement.children[this._getItemIndex(e)];i&&t(i).addClass(h.ACTIVE)}},d._slide=function(e,n){var i,r,o,s=this,a=this._element.querySelector(f.ACTIVE_ITEM),l=this._getItemIndex(a),d=n||a&&this._getItemByDirection(e,a),g=this._getItemIndex(d),p=Boolean(this._interval);if(e===c.NEXT?(i=h.LEFT,r=h.NEXT,o=c.LEFT):(i=h.RIGHT,r=h.PREV,o=c.RIGHT),d&&t(d).hasClass(h.ACTIVE))return void(this._isSliding=!1);if(!this._triggerSlideEvent(d,o).isDefaultPrevented()&&a&&d){this._isSliding=!0,p&&this.pause(),this._setActiveIndicatorElement(d);var m=t.Event(u.SLID,{relatedTarget:d,direction:o,from:l,to:g});if(t(this._element).hasClass(h.SLIDE)){t(d).addClass(r),gt.reflow(d),t(a).addClass(i),t(d).addClass(i);var _=gt.getTransitionDurationFromElement(a);t(a).one(gt.TRANSITION_END,function(){t(d).removeClass(i+" "+r).addClass(h.ACTIVE),t(a).removeClass(h.ACTIVE+" "+r+" "+i),s._isSliding=!1,setTimeout(function(){return t(s._element).trigger(m)},0)}).emulateTransitionEnd(_)}else t(a).removeClass(h.ACTIVE),t(d).addClass(h.ACTIVE),this._isSliding=!1,t(this._element).trigger(m);p&&this.cycle()}},s._jQueryInterface=function(e){return this.each(function(){var i=t(this).data(n),r=o({},a,t(this).data());"object"===(void 0===e?"undefined":_typeof(e))&&(r=o({},r,e));var l="string"==typeof e?e:r.slide;if(i||(i=new s(this,r),t(this).data(n,i)),"number"==typeof e)i.to(e);else if("string"==typeof l){if(void 0===i[l])throw new TypeError('No method named "'+l+'"');i[l]()}else r.interval&&(i.pause(),i.cycle())})},s._dataApiClickHandler=function(e){var i=gt.getSelectorFromElement(this);if(i){var r=t(i)[0];if(r&&t(r).hasClass(h.CAROUSEL)){var a=o({},t(r).data(),t(this).data()),l=this.getAttribute("data-slide-to");l&&(a.interval=!1),s._jQueryInterface.call(t(r),a),l&&t(r).data(n).to(l),e.preventDefault()}}},i(s,null,[{key:"VERSION",get:function(){return"4.1.2"}},{key:"Default",get:function(){return a}}]),s}();return t(document).on(u.CLICK_DATA_API,f.DATA_SLIDE,d._dataApiClickHandler),t(window).on(u.LOAD_DATA_API,function(){for(var e=[].slice.call(document.querySelectorAll(f.DATA_RIDE)),n=0,i=e.length;n<i;n++){var r=t(e[n]);d._jQueryInterface.call(r,r.data())}}),t.fn[e]=d._jQueryInterface,t.fn[e].Constructor=d,t.fn[e].noConflict=function(){return t.fn[e]=s,d._jQueryInterface},d}(e)),vt=function(t){var e="collapse",n="bs.collapse",r=t.fn[e],s={toggle:!0,parent:""},a={toggle:"boolean",parent:"(string|element)"},l={SHOW:"show.bs.collapse",SHOWN:"shown.bs.collapse",HIDE:"hide.bs.collapse",HIDDEN:"hidden.bs.collapse",CLICK_DATA_API:"click.bs.collapse.data-api"},c={SHOW:"show",COLLAPSE:"collapse",COLLAPSING:"collapsing",COLLAPSED:"collapsed"},u={WIDTH:"width",HEIGHT:"height"},h={ACTIVES:".show, .collapsing",DATA_TOGGLE:'[data-toggle="collapse"]'},f=function(){function r(e,n){this._isTransitioning=!1,this._element=e,this._config=this._getConfig(n),this._triggerArray=t.makeArray(document.querySelectorAll('[data-toggle="collapse"][href="#'+e.id+'"],[data-toggle="collapse"][data-target="#'+e.id+'"]'));for(var i=[].slice.call(document.querySelectorAll(h.DATA_TOGGLE)),r=0,o=i.length;r<o;r++){var s=i[r],a=gt.getSelectorFromElement(s),l=[].slice.call(document.querySelectorAll(a)).filter(function(t){return t===e});null!==a&&l.length>0&&(this._selector=a,this._triggerArray.push(s))}this._parent=this._config.parent?this._getParent():null,this._config.parent||this._addAriaAndCollapsedClass(this._element,this._triggerArray),this._config.toggle&&this.toggle()}var f=r.prototype;return f.toggle=function(){t(this._element).hasClass(c.SHOW)?this.hide():this.show()},f.show=function(){var e=this;if(!this._isTransitioning&&!t(this._element).hasClass(c.SHOW)){var i,o;if(this._parent&&(i=[].slice.call(this._parent.querySelectorAll(h.ACTIVES)).filter(function(t){return t.getAttribute("data-parent")===e._config.parent}),0===i.length&&(i=null)),!(i&&(o=t(i).not(this._selector).data(n))&&o._isTransitioning)){var s=t.Event(l.SHOW);if(t(this._element).trigger(s),!s.isDefaultPrevented()){i&&(r._jQueryInterface.call(t(i).not(this._selector),"hide"),o||t(i).data(n,null));var a=this._getDimension();t(this._element).removeClass(c.COLLAPSE).addClass(c.COLLAPSING),this._element.style[a]=0,this._triggerArray.length&&t(this._triggerArray).removeClass(c.COLLAPSED).attr("aria-expanded",!0),this.setTransitioning(!0);var u=function(){t(e._element).removeClass(c.COLLAPSING).addClass(c.COLLAPSE).addClass(c.SHOW),e._element.style[a]="",e.setTransitioning(!1),t(e._element).trigger(l.SHOWN)},f=a[0].toUpperCase()+a.slice(1),d="scroll"+f,g=gt.getTransitionDurationFromElement(this._element);t(this._element).one(gt.TRANSITION_END,u).emulateTransitionEnd(g),this._element.style[a]=this._element[d]+"px"}}}},f.hide=function(){var e=this;if(!this._isTransitioning&&t(this._element).hasClass(c.SHOW)){var n=t.Event(l.HIDE);if(t(this._element).trigger(n),!n.isDefaultPrevented()){
var i=this._getDimension();this._element.style[i]=this._element.getBoundingClientRect()[i]+"px",gt.reflow(this._element),t(this._element).addClass(c.COLLAPSING).removeClass(c.COLLAPSE).removeClass(c.SHOW);var r=this._triggerArray.length;if(r>0)for(var o=0;o<r;o++){var s=this._triggerArray[o],a=gt.getSelectorFromElement(s);if(null!==a){var u=t([].slice.call(document.querySelectorAll(a)));u.hasClass(c.SHOW)||t(s).addClass(c.COLLAPSED).attr("aria-expanded",!1)}}this.setTransitioning(!0);var h=function(){e.setTransitioning(!1),t(e._element).removeClass(c.COLLAPSING).addClass(c.COLLAPSE).trigger(l.HIDDEN)};this._element.style[i]="";var f=gt.getTransitionDurationFromElement(this._element);t(this._element).one(gt.TRANSITION_END,h).emulateTransitionEnd(f)}}},f.setTransitioning=function(t){this._isTransitioning=t},f.dispose=function(){t.removeData(this._element,n),this._config=null,this._parent=null,this._element=null,this._triggerArray=null,this._isTransitioning=null},f._getConfig=function(t){return t=o({},s,t),t.toggle=Boolean(t.toggle),gt.typeCheckConfig(e,t,a),t},f._getDimension=function(){return t(this._element).hasClass(u.WIDTH)?u.WIDTH:u.HEIGHT},f._getParent=function(){var e=this,n=null;gt.isElement(this._config.parent)?(n=this._config.parent,void 0!==this._config.parent.jquery&&(n=this._config.parent[0])):n=document.querySelector(this._config.parent);var i='[data-toggle="collapse"][data-parent="'+this._config.parent+'"]',o=[].slice.call(n.querySelectorAll(i));return t(o).each(function(t,n){e._addAriaAndCollapsedClass(r._getTargetFromElement(n),[n])}),n},f._addAriaAndCollapsedClass=function(e,n){if(e){var i=t(e).hasClass(c.SHOW);n.length&&t(n).toggleClass(c.COLLAPSED,!i).attr("aria-expanded",i)}},r._getTargetFromElement=function(t){var e=gt.getSelectorFromElement(t);return e?document.querySelector(e):null},r._jQueryInterface=function(e){return this.each(function(){var i=t(this),a=i.data(n),l=o({},s,i.data(),"object"===(void 0===e?"undefined":_typeof(e))&&e?e:{});if(!a&&l.toggle&&/show|hide/.test(e)&&(l.toggle=!1),a||(a=new r(this,l),i.data(n,a)),"string"==typeof e){if(void 0===a[e])throw new TypeError('No method named "'+e+'"');a[e]()}})},i(r,null,[{key:"VERSION",get:function(){return"4.1.2"}},{key:"Default",get:function(){return s}}]),r}();return t(document).on(l.CLICK_DATA_API,h.DATA_TOGGLE,function(e){"A"===e.currentTarget.tagName&&e.preventDefault();var i=t(this),r=gt.getSelectorFromElement(this),o=[].slice.call(document.querySelectorAll(r));t(o).each(function(){var e=t(this),r=e.data(n),o=r?"toggle":i.data();f._jQueryInterface.call(e,o)})}),t.fn[e]=f._jQueryInterface,t.fn[e].Constructor=f,t.fn[e].noConflict=function(){return t.fn[e]=r,f._jQueryInterface},f}(e),Et="undefined"!=typeof window&&"undefined"!=typeof document,Tt=["Edge","Trident","Firefox"],yt=0,At=0;At<Tt.length;At+=1)if(Et&&navigator.userAgent.indexOf(Tt[At])>=0){yt=1;break}var It=Et&&window.Promise,bt=It?a:l,Ct=Et&&!(!window.MSInputMethodContext||!document.documentMode),St=Et&&/MSIE 10/.test(navigator.userAgent),Ot=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")},Dt=function(){function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}(),Nt=function(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t},wt=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(t[i]=n[i])}return t},Lt=["auto-start","auto","auto-end","top-start","top","top-end","right-start","right","right-end","bottom-end","bottom","bottom-start","left-end","left","left-start"],Pt=Lt.slice(3),Rt={FLIP:"flip",CLOCKWISE:"clockwise",COUNTERCLOCKWISE:"counterclockwise"},Ht={shift:{order:100,enabled:!0,fn:ht},offset:{order:200,enabled:!0,fn:ct,offset:0},preventOverflow:{order:300,enabled:!0,fn:ut,priority:["left","right","top","bottom"],padding:5,boundariesElement:"scrollParent"},keepTogether:{order:400,enabled:!0,fn:st},arrow:{order:500,enabled:!0,fn:nt,element:"[x-arrow]"},flip:{order:600,enabled:!0,fn:ot,behavior:"flip",padding:5,boundariesElement:"viewport"},inner:{order:700,enabled:!1,fn:dt},hide:{order:800,enabled:!0,fn:ft},computeStyle:{order:850,enabled:!0,fn:tt,gpuAcceleration:!0,x:"bottom",y:"right"},applyStyle:{order:900,enabled:!0,fn:Z,onLoad:$,gpuAcceleration:void 0}},kt={placement:"bottom",positionFixed:!1,eventsEnabled:!0,removeOnDestroy:!1,onCreate:function(){},onUpdate:function(){},modifiers:Ht},Wt=function(){function t(e,n){var i=this,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};Ot(this,t),this.scheduleUpdate=function(){return requestAnimationFrame(i.update)},this.update=bt(this.update.bind(this)),this.options=wt({},t.Defaults,r),this.state={isDestroyed:!1,isCreated:!1,scrollParents:[]},this.reference=e&&e.jquery?e[0]:e,this.popper=n&&n.jquery?n[0]:n,this.options.modifiers={},Object.keys(wt({},t.Defaults.modifiers,r.modifiers)).forEach(function(e){i.options.modifiers[e]=wt({},t.Defaults.modifiers[e]||{},r.modifiers?r.modifiers[e]:{})}),this.modifiers=Object.keys(this.options.modifiers).map(function(t){return wt({name:t},i.options.modifiers[t])}).sort(function(t,e){return t.order-e.order}),this.modifiers.forEach(function(t){t.enabled&&c(t.onLoad)&&t.onLoad(i.reference,i.popper,i.options,t,i.state)}),this.update();var o=this.options.eventsEnabled;o&&this.enableEventListeners(),this.state.eventsEnabled=o}return Dt(t,[{key:"update",value:function(){return U.call(this)}},{key:"destroy",value:function(){return x.call(this)}},{key:"enableEventListeners",value:function(){return q.call(this)}},{key:"disableEventListeners",value:function(){return Y.call(this)}}]),t}();Wt.Utils=("undefined"!=typeof window?window:global).PopperUtils,Wt.placements=Lt,Wt.Defaults=kt;var Ft=function(t){var e="dropdown",n="bs.dropdown",r="."+n,s=t.fn[e],a=new RegExp("38|40|27"),l={HIDE:"hide"+r,HIDDEN:"hidden"+r,SHOW:"show"+r,SHOWN:"shown"+r,CLICK:"click"+r,CLICK_DATA_API:"click.bs.dropdown.data-api",KEYDOWN_DATA_API:"keydown.bs.dropdown.data-api",KEYUP_DATA_API:"keyup.bs.dropdown.data-api"},c={DISABLED:"disabled",SHOW:"show",DROPUP:"dropup",DROPRIGHT:"dropright",DROPLEFT:"dropleft",MENURIGHT:"dropdown-menu-right",MENULEFT:"dropdown-menu-left",POSITION_STATIC:"position-static"},u={DATA_TOGGLE:'[data-toggle="dropdown"]',FORM_CHILD:".dropdown form",MENU:".dropdown-menu",NAVBAR_NAV:".navbar-nav",VISIBLE_ITEMS:".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)"},h={TOP:"top-start",TOPEND:"top-end",BOTTOM:"bottom-start",BOTTOMEND:"bottom-end",RIGHT:"right-start",RIGHTEND:"right-end",LEFT:"left-start",LEFTEND:"left-end"},f={offset:0,flip:!0,boundary:"scrollParent",reference:"toggle",display:"dynamic"},d={offset:"(number|string|function)",flip:"boolean",boundary:"(string|element)",reference:"(string|element)",display:"string"},g=function(){function s(t,e){this._element=t,this._popper=null,this._config=this._getConfig(e),this._menu=this._getMenuElement(),this._inNavbar=this._detectNavbar(),this._addEventListeners()}var g=s.prototype;return g.toggle=function(){if(!this._element.disabled&&!t(this._element).hasClass(c.DISABLED)){var e=s._getParentFromElement(this._element),n=t(this._menu).hasClass(c.SHOW);if(s._clearMenus(),!n){var i={relatedTarget:this._element},r=t.Event(l.SHOW,i);if(t(e).trigger(r),!r.isDefaultPrevented()){if(!this._inNavbar){if(void 0===Wt)throw new TypeError("Bootstrap dropdown require Popper.js (https://popper.js.org)");var o=this._element;"parent"===this._config.reference?o=e:gt.isElement(this._config.reference)&&(o=this._config.reference,void 0!==this._config.reference.jquery&&(o=this._config.reference[0])),"scrollParent"!==this._config.boundary&&t(e).addClass(c.POSITION_STATIC),this._popper=new Wt(o,this._menu,this._getPopperConfig())}"ontouchstart"in document.documentElement&&0===t(e).closest(u.NAVBAR_NAV).length&&t(document.body).children().on("mouseover",null,t.noop),this._element.focus(),this._element.setAttribute("aria-expanded",!0),t(this._menu).toggleClass(c.SHOW),t(e).toggleClass(c.SHOW).trigger(t.Event(l.SHOWN,i))}}}},g.dispose=function(){t.removeData(this._element,n),t(this._element).off(r),this._element=null,this._menu=null,null!==this._popper&&(this._popper.destroy(),this._popper=null)},g.update=function(){this._inNavbar=this._detectNavbar(),null!==this._popper&&this._popper.scheduleUpdate()},g._addEventListeners=function(){var e=this;t(this._element).on(l.CLICK,function(t){t.preventDefault(),t.stopPropagation(),e.toggle()})},g._getConfig=function(n){return n=o({},this.constructor.Default,t(this._element).data(),n),gt.typeCheckConfig(e,n,this.constructor.DefaultType),n},g._getMenuElement=function(){if(!this._menu){var t=s._getParentFromElement(this._element);t&&(this._menu=t.querySelector(u.MENU))}return this._menu},g._getPlacement=function(){var e=t(this._element.parentNode),n=h.BOTTOM;return e.hasClass(c.DROPUP)?(n=h.TOP,t(this._menu).hasClass(c.MENURIGHT)&&(n=h.TOPEND)):e.hasClass(c.DROPRIGHT)?n=h.RIGHT:e.hasClass(c.DROPLEFT)?n=h.LEFT:t(this._menu).hasClass(c.MENURIGHT)&&(n=h.BOTTOMEND),n},g._detectNavbar=function(){return t(this._element).closest(".navbar").length>0},g._getPopperConfig=function(){var t=this,e={};"function"==typeof this._config.offset?e.fn=function(e){return e.offsets=o({},e.offsets,t._config.offset(e.offsets)||{}),e}:e.offset=this._config.offset;var n={placement:this._getPlacement(),modifiers:{offset:e,flip:{enabled:this._config.flip},preventOverflow:{boundariesElement:this._config.boundary}}};return"static"===this._config.display&&(n.modifiers.applyStyle={enabled:!1}),n},s._jQueryInterface=function(e){return this.each(function(){var i=t(this).data(n),r="object"===(void 0===e?"undefined":_typeof(e))?e:null;if(i||(i=new s(this,r),t(this).data(n,i)),"string"==typeof e){if(void 0===i[e])throw new TypeError('No method named "'+e+'"');i[e]()}})},s._clearMenus=function(e){if(!e||3!==e.which&&("keyup"!==e.type||9===e.which))for(var i=[].slice.call(document.querySelectorAll(u.DATA_TOGGLE)),r=0,o=i.length;r<o;r++){var a=s._getParentFromElement(i[r]),h=t(i[r]).data(n),f={relatedTarget:i[r]};if(e&&"click"===e.type&&(f.clickEvent=e),h){var d=h._menu;if(t(a).hasClass(c.SHOW)&&!(e&&("click"===e.type&&/input|textarea/i.test(e.target.tagName)||"keyup"===e.type&&9===e.which)&&t.contains(a,e.target))){var g=t.Event(l.HIDE,f);t(a).trigger(g),g.isDefaultPrevented()||("ontouchstart"in document.documentElement&&t(document.body).children().off("mouseover",null,t.noop),i[r].setAttribute("aria-expanded","false"),t(d).removeClass(c.SHOW),t(a).removeClass(c.SHOW).trigger(t.Event(l.HIDDEN,f)))}}}},s._getParentFromElement=function(t){var e,n=gt.getSelectorFromElement(t);return n&&(e=document.querySelector(n)),e||t.parentNode},s._dataApiKeydownHandler=function(e){if((/input|textarea/i.test(e.target.tagName)?!(32===e.which||27!==e.which&&(40!==e.which&&38!==e.which||t(e.target).closest(u.MENU).length)):a.test(e.which))&&(e.preventDefault(),e.stopPropagation(),!this.disabled&&!t(this).hasClass(c.DISABLED))){var n=s._getParentFromElement(this),i=t(n).hasClass(c.SHOW);if(!i&&(27!==e.which||32!==e.which)||i&&(27===e.which||32===e.which)){if(27===e.which){var r=n.querySelector(u.DATA_TOGGLE);t(r).trigger("focus")}return void t(this).trigger("click")}var o=[].slice.call(n.querySelectorAll(u.VISIBLE_ITEMS));if(0!==o.length){var l=o.indexOf(e.target);38===e.which&&l>0&&l--,40===e.which&&l<o.length-1&&l++,l<0&&(l=0),o[l].focus()}}},i(s,null,[{key:"VERSION",get:function(){return"4.1.2"}},{key:"Default",get:function(){return f}},{key:"DefaultType",get:function(){return d}}]),s}();return t(document).on(l.KEYDOWN_DATA_API,u.DATA_TOGGLE,g._dataApiKeydownHandler).on(l.KEYDOWN_DATA_API,u.MENU,g._dataApiKeydownHandler).on(l.CLICK_DATA_API+" "+l.KEYUP_DATA_API,g._clearMenus).on(l.CLICK_DATA_API,u.DATA_TOGGLE,function(e){e.preventDefault(),e.stopPropagation(),g._jQueryInterface.call(t(this),"toggle")}).on(l.CLICK_DATA_API,u.FORM_CHILD,function(t){t.stopPropagation()}),t.fn[e]=g._jQueryInterface,t.fn[e].Constructor=g,t.fn[e].noConflict=function(){return t.fn[e]=s,g._jQueryInterface},g}(e),Mt=function(t){var e="modal",n=".bs.modal",r=t.fn[e],s={backdrop:!0,keyboard:!0,focus:!0,show:!0},a={backdrop:"(boolean|string)",keyboard:"boolean",focus:"boolean",show:"boolean"},l={HIDE:"hide.bs.modal",HIDDEN:"hidden.bs.modal",SHOW:"show.bs.modal",SHOWN:"shown.bs.modal",FOCUSIN:"focusin.bs.modal",RESIZE:"resize.bs.modal",CLICK_DISMISS:"click.dismiss.bs.modal",KEYDOWN_DISMISS:"keydown.dismiss.bs.modal",MOUSEUP_DISMISS:"mouseup.dismiss.bs.modal",MOUSEDOWN_DISMISS:"mousedown.dismiss.bs.modal",CLICK_DATA_API:"click.bs.modal.data-api"},c={SCROLLBAR_MEASURER:"modal-scrollbar-measure",BACKDROP:"modal-backdrop",OPEN:"modal-open",FADE:"fade",SHOW:"show"},u={DIALOG:".modal-dialog",DATA_TOGGLE:'[data-toggle="modal"]',DATA_DISMISS:'[data-dismiss="modal"]',FIXED_CONTENT:".fixed-top, .fixed-bottom, .is-fixed, .sticky-top",STICKY_CONTENT:".sticky-top"},h=function(){function r(t,e){this._config=this._getConfig(e),this._element=t,this._dialog=t.querySelector(u.DIALOG),this._backdrop=null,this._isShown=!1,this._isBodyOverflowing=!1,this._ignoreBackdropClick=!1,this._scrollbarWidth=0}var h=r.prototype;return h.toggle=function(t){return this._isShown?this.hide():this.show(t)},h.show=function(e){var n=this;if(!this._isTransitioning&&!this._isShown){t(this._element).hasClass(c.FADE)&&(this._isTransitioning=!0);var i=t.Event(l.SHOW,{relatedTarget:e});t(this._element).trigger(i),this._isShown||i.isDefaultPrevented()||(this._isShown=!0,this._checkScrollbar(),this._setScrollbar(),this._adjustDialog(),t(document.body).addClass(c.OPEN),this._setEscapeEvent(),this._setResizeEvent(),t(this._element).on(l.CLICK_DISMISS,u.DATA_DISMISS,function(t){return n.hide(t)}),t(this._dialog).on(l.MOUSEDOWN_DISMISS,function(){t(n._element).one(l.MOUSEUP_DISMISS,function(e){t(e.target).is(n._element)&&(n._ignoreBackdropClick=!0)})}),this._showBackdrop(function(){return n._showElement(e)}))}},h.hide=function(e){var n=this;if(e&&e.preventDefault(),!this._isTransitioning&&this._isShown){var i=t.Event(l.HIDE);if(t(this._element).trigger(i),this._isShown&&!i.isDefaultPrevented()){this._isShown=!1;var r=t(this._element).hasClass(c.FADE);if(r&&(this._isTransitioning=!0),this._setEscapeEvent(),this._setResizeEvent(),t(document).off(l.FOCUSIN),t(this._element).removeClass(c.SHOW),t(this._element).off(l.CLICK_DISMISS),t(this._dialog).off(l.MOUSEDOWN_DISMISS),r){var o=gt.getTransitionDurationFromElement(this._element);t(this._element).one(gt.TRANSITION_END,function(t){return n._hideModal(t)}).emulateTransitionEnd(o)}else this._hideModal()}}},h.dispose=function(){t.removeData(this._element,"bs.modal"),t(window,document,this._element,this._backdrop).off(n),this._config=null,this._element=null,this._dialog=null,this._backdrop=null,this._isShown=null,this._isBodyOverflowing=null,this._ignoreBackdropClick=null,this._scrollbarWidth=null},h.handleUpdate=function(){this._adjustDialog()},h._getConfig=function(t){return t=o({},s,t),gt.typeCheckConfig(e,t,a),t},h._showElement=function(e){var n=this,i=t(this._element).hasClass(c.FADE);this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE||document.body.appendChild(this._element),this._element.style.display="block",this._element.removeAttribute("aria-hidden"),this._element.scrollTop=0,i&&gt.reflow(this._element),t(this._element).addClass(c.SHOW),this._config.focus&&this._enforceFocus();var r=t.Event(l.SHOWN,{relatedTarget:e}),o=function(){n._config.focus&&n._element.focus(),n._isTransitioning=!1,t(n._element).trigger(r)};if(i){var s=gt.getTransitionDurationFromElement(this._element);t(this._dialog).one(gt.TRANSITION_END,o).emulateTransitionEnd(s)}else o()},h._enforceFocus=function(){var e=this;t(document).off(l.FOCUSIN).on(l.FOCUSIN,function(n){document!==n.target&&e._element!==n.target&&0===t(e._element).has(n.target).length&&e._element.focus()})},h._setEscapeEvent=function(){var e=this;this._isShown&&this._config.keyboard?t(this._element).on(l.KEYDOWN_DISMISS,function(t){27===t.which&&(t.preventDefault(),e.hide())}):this._isShown||t(this._element).off(l.KEYDOWN_DISMISS)},h._setResizeEvent=function(){var e=this;this._isShown?t(window).on(l.RESIZE,function(t){return e.handleUpdate(t)}):t(window).off(l.RESIZE)},h._hideModal=function(){var e=this;this._element.style.display="none",this._element.setAttribute("aria-hidden",!0),this._isTransitioning=!1,this._showBackdrop(function(){t(document.body).removeClass(c.OPEN),e._resetAdjustments(),e._resetScrollbar(),t(e._element).trigger(l.HIDDEN)})},h._removeBackdrop=function(){this._backdrop&&(t(this._backdrop).remove(),this._backdrop=null)},h._showBackdrop=function(e){var n=this,i=t(this._element).hasClass(c.FADE)?c.FADE:"";if(this._isShown&&this._config.backdrop){if(this._backdrop=document.createElement("div"),this._backdrop.className=c.BACKDROP,i&&this._backdrop.classList.add(i),t(this._backdrop).appendTo(document.body),t(this._element).on(l.CLICK_DISMISS,function(t){if(n._ignoreBackdropClick)return void(n._ignoreBackdropClick=!1);t.target===t.currentTarget&&("static"===n._config.backdrop?n._element.focus():n.hide())}),i&&gt.reflow(this._backdrop),t(this._backdrop).addClass(c.SHOW),!e)return;if(!i)return void e();var r=gt.getTransitionDurationFromElement(this._backdrop);t(this._backdrop).one(gt.TRANSITION_END,e).emulateTransitionEnd(r)}else if(!this._isShown&&this._backdrop){t(this._backdrop).removeClass(c.SHOW);var o=function(){n._removeBackdrop(),e&&e()};if(t(this._element).hasClass(c.FADE)){var s=gt.getTransitionDurationFromElement(this._backdrop);t(this._backdrop).one(gt.TRANSITION_END,o).emulateTransitionEnd(s)}else o()}else e&&e()},h._adjustDialog=function(){var t=this._element.scrollHeight>document.documentElement.clientHeight;!this._isBodyOverflowing&&t&&(this._element.style.paddingLeft=this._scrollbarWidth+"px"),this._isBodyOverflowing&&!t&&(this._element.style.paddingRight=this._scrollbarWidth+"px")},h._resetAdjustments=function(){this._element.style.paddingLeft="",this._element.style.paddingRight=""},h._checkScrollbar=function(){var t=document.body.getBoundingClientRect();this._isBodyOverflowing=t.left+t.right<window.innerWidth,this._scrollbarWidth=this._getScrollbarWidth()},h._setScrollbar=function(){var e=this;if(this._isBodyOverflowing){var n=[].slice.call(document.querySelectorAll(u.FIXED_CONTENT)),i=[].slice.call(document.querySelectorAll(u.STICKY_CONTENT));t(n).each(function(n,i){var r=i.style.paddingRight,o=t(i).css("padding-right");t(i).data("padding-right",r).css("padding-right",parseFloat(o)+e._scrollbarWidth+"px")}),t(i).each(function(n,i){var r=i.style.marginRight,o=t(i).css("margin-right");t(i).data("margin-right",r).css("margin-right",parseFloat(o)-e._scrollbarWidth+"px")});var r=document.body.style.paddingRight,o=t(document.body).css("padding-right");t(document.body).data("padding-right",r).css("padding-right",parseFloat(o)+this._scrollbarWidth+"px")}},h._resetScrollbar=function(){var e=[].slice.call(document.querySelectorAll(u.FIXED_CONTENT));t(e).each(function(e,n){var i=t(n).data("padding-right");t(n).removeData("padding-right"),n.style.paddingRight=i||""});var n=[].slice.call(document.querySelectorAll(""+u.STICKY_CONTENT));t(n).each(function(e,n){var i=t(n).data("margin-right");void 0!==i&&t(n).css("margin-right",i).removeData("margin-right")});var i=t(document.body).data("padding-right");t(document.body).removeData("padding-right"),document.body.style.paddingRight=i||""},h._getScrollbarWidth=function(){var t=document.createElement("div");t.className=c.SCROLLBAR_MEASURER,document.body.appendChild(t);var e=t.getBoundingClientRect().width-t.clientWidth;return document.body.removeChild(t),e},r._jQueryInterface=function(e,n){return this.each(function(){var i=t(this).data("bs.modal"),a=o({},s,t(this).data(),"object"===(void 0===e?"undefined":_typeof(e))&&e?e:{});if(i||(i=new r(this,a),t(this).data("bs.modal",i)),"string"==typeof e){if(void 0===i[e])throw new TypeError('No method named "'+e+'"');i[e](n)}else a.show&&i.show(n)})},i(r,null,[{key:"VERSION",get:function(){return"4.1.2"}},{key:"Default",get:function(){return s}}]),r}();return t(document).on(l.CLICK_DATA_API,u.DATA_TOGGLE,function(e){var n,i=this,r=gt.getSelectorFromElement(this);r&&(n=document.querySelector(r));var s=t(n).data("bs.modal")?"toggle":o({},t(n).data(),t(this).data());"A"!==this.tagName&&"AREA"!==this.tagName||e.preventDefault();var a=t(n).one(l.SHOW,function(e){e.isDefaultPrevented()||a.one(l.HIDDEN,function(){t(i).is(":visible")&&i.focus()})});h._jQueryInterface.call(t(n),s,this)}),t.fn[e]=h._jQueryInterface,t.fn[e].Constructor=h,t.fn[e].noConflict=function(){return t.fn[e]=r,h._jQueryInterface},h}(e),Ut=function(t){var e="tooltip",n=".bs.tooltip",r=t.fn[e],s=new RegExp("(^|\\s)bs-tooltip\\S+","g"),a={animation:"boolean",template:"string",title:"(string|element|function)",trigger:"string",delay:"(number|object)",html:"boolean",selector:"(string|boolean)",placement:"(string|function)",offset:"(number|string)",container:"(string|element|boolean)",fallbackPlacement:"(string|array)",boundary:"(string|element)"},l={AUTO:"auto",TOP:"top",RIGHT:"right",BOTTOM:"bottom",LEFT:"left"},c={animation:!0,template:'<div class="tooltip" role="tooltip"><div class="arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:!1,selector:!1,placement:"top",offset:0,container:!1,fallbackPlacement:"flip",boundary:"scrollParent"},u={SHOW:"show",OUT:"out"},h={HIDE:"hide"+n,HIDDEN:"hidden"+n,SHOW:"show"+n,SHOWN:"shown"+n,INSERTED:"inserted"+n,CLICK:"click"+n,FOCUSIN:"focusin"+n,FOCUSOUT:"focusout"+n,MOUSEENTER:"mouseenter"+n,MOUSELEAVE:"mouseleave"+n},f={FADE:"fade",SHOW:"show"},d={TOOLTIP:".tooltip",TOOLTIP_INNER:".tooltip-inner",ARROW:".arrow"},g={HOVER:"hover",FOCUS:"focus",CLICK:"click",MANUAL:"manual"},p=function(){function r(t,e){if(void 0===Wt)throw new TypeError("Bootstrap tooltips require Popper.js (https://popper.js.org)");this._isEnabled=!0,this._timeout=0,this._hoverState="",this._activeTrigger={},this._popper=null,this.element=t,this.config=this._getConfig(e),this.tip=null,this._setListeners()}var p=r.prototype;return p.enable=function(){this._isEnabled=!0},p.disable=function(){this._isEnabled=!1},p.toggleEnabled=function(){this._isEnabled=!this._isEnabled},p.toggle=function(e){if(this._isEnabled)if(e){var n=this.constructor.DATA_KEY,i=t(e.currentTarget).data(n);i||(i=new this.constructor(e.currentTarget,this._getDelegateConfig()),t(e.currentTarget).data(n,i)),i._activeTrigger.click=!i._activeTrigger.click,i._isWithActiveTrigger()?i._enter(null,i):i._leave(null,i)}else{if(t(this.getTipElement()).hasClass(f.SHOW))return void this._leave(null,this);this._enter(null,this)}},p.dispose=function(){clearTimeout(this._timeout),t.removeData(this.element,this.constructor.DATA_KEY),t(this.element).off(this.constructor.EVENT_KEY),t(this.element).closest(".modal").off("hide.bs.modal"),this.tip&&t(this.tip).remove(),this._isEnabled=null,this._timeout=null,this._hoverState=null,this._activeTrigger=null,null!==this._popper&&this._popper.destroy(),this._popper=null,this.element=null,this.config=null,this.tip=null},p.show=function(){var e=this;if("none"===t(this.element).css("display"))throw new Error("Please use show on visible elements");var n=t.Event(this.constructor.Event.SHOW);if(this.isWithContent()&&this._isEnabled){t(this.element).trigger(n);var i=t.contains(this.element.ownerDocument.documentElement,this.element);if(n.isDefaultPrevented()||!i)return;var r=this.getTipElement(),o=gt.getUID(this.constructor.NAME);r.setAttribute("id",o),this.element.setAttribute("aria-describedby",o),this.setContent(),this.config.animation&&t(r).addClass(f.FADE);var s="function"==typeof this.config.placement?this.config.placement.call(this,r,this.element):this.config.placement,a=this._getAttachment(s);this.addAttachmentClass(a);var l=!1===this.config.container?document.body:t(document).find(this.config.container);t(r).data(this.constructor.DATA_KEY,this),t.contains(this.element.ownerDocument.documentElement,this.tip)||t(r).appendTo(l),t(this.element).trigger(this.constructor.Event.INSERTED),this._popper=new Wt(this.element,r,{placement:a,modifiers:{offset:{offset:this.config.offset},flip:{behavior:this.config.fallbackPlacement},arrow:{element:d.ARROW},preventOverflow:{boundariesElement:this.config.boundary}},onCreate:function(t){t.originalPlacement!==t.placement&&e._handlePopperPlacementChange(t)},onUpdate:function(t){e._handlePopperPlacementChange(t)}}),t(r).addClass(f.SHOW),"ontouchstart"in document.documentElement&&t(document.body).children().on("mouseover",null,t.noop);var c=function(){e.config.animation&&e._fixTransition();var n=e._hoverState;e._hoverState=null,t(e.element).trigger(e.constructor.Event.SHOWN),n===u.OUT&&e._leave(null,e)};if(t(this.tip).hasClass(f.FADE)){var h=gt.getTransitionDurationFromElement(this.tip);t(this.tip).one(gt.TRANSITION_END,c).emulateTransitionEnd(h)}else c()}},p.hide=function(e){var n=this,i=this.getTipElement(),r=t.Event(this.constructor.Event.HIDE),o=function(){n._hoverState!==u.SHOW&&i.parentNode&&i.parentNode.removeChild(i),n._cleanTipClass(),n.element.removeAttribute("aria-describedby"),t(n.element).trigger(n.constructor.Event.HIDDEN),null!==n._popper&&n._popper.destroy(),e&&e()};if(t(this.element).trigger(r),!r.isDefaultPrevented()){if(t(i).removeClass(f.SHOW),"ontouchstart"in document.documentElement&&t(document.body).children().off("mouseover",null,t.noop),this._activeTrigger[g.CLICK]=!1,this._activeTrigger[g.FOCUS]=!1,this._activeTrigger[g.HOVER]=!1,t(this.tip).hasClass(f.FADE)){var s=gt.getTransitionDurationFromElement(i);t(i).one(gt.TRANSITION_END,o).emulateTransitionEnd(s)}else o();this._hoverState=""}},p.update=function(){null!==this._popper&&this._popper.scheduleUpdate()},p.isWithContent=function(){return Boolean(this.getTitle())},p.addAttachmentClass=function(e){t(this.getTipElement()).addClass("bs-tooltip-"+e)},p.getTipElement=function(){return this.tip=this.tip||t(this.config.template)[0],this.tip},p.setContent=function(){var e=this.getTipElement();this.setElementContent(t(e.querySelectorAll(d.TOOLTIP_INNER)),this.getTitle()),t(e).removeClass(f.FADE+" "+f.SHOW)},p.setElementContent=function(e,n){var i=this.config.html;"object"===(void 0===n?"undefined":_typeof(n))&&(n.nodeType||n.jquery)?i?t(n).parent().is(e)||e.empty().append(n):e.text(t(n).text()):e[i?"html":"text"](n)},p.getTitle=function(){var t=this.element.getAttribute("data-original-title");return t||(t="function"==typeof this.config.title?this.config.title.call(this.element):this.config.title),t},p._getAttachment=function(t){return l[t.toUpperCase()]},p._setListeners=function(){var e=this;this.config.trigger.split(" ").forEach(function(n){if("click"===n)t(e.element).on(e.constructor.Event.CLICK,e.config.selector,function(t){return e.toggle(t)});else if(n!==g.MANUAL){var i=n===g.HOVER?e.constructor.Event.MOUSEENTER:e.constructor.Event.FOCUSIN,r=n===g.HOVER?e.constructor.Event.MOUSELEAVE:e.constructor.Event.FOCUSOUT;t(e.element).on(i,e.config.selector,function(t){return e._enter(t)}).on(r,e.config.selector,function(t){return e._leave(t)})}t(e.element).closest(".modal").on("hide.bs.modal",function(){return e.hide()})}),this.config.selector?this.config=o({},this.config,{trigger:"manual",selector:""}):this._fixTitle()},p._fixTitle=function(){var t=_typeof(this.element.getAttribute("data-original-title"));(this.element.getAttribute("title")||"string"!==t)&&(this.element.setAttribute("data-original-title",this.element.getAttribute("title")||""),this.element.setAttribute("title",""))},p._enter=function(e,n){var i=this.constructor.DATA_KEY;return n=n||t(e.currentTarget).data(i),n||(n=new this.constructor(e.currentTarget,this._getDelegateConfig()),t(e.currentTarget).data(i,n)),e&&(n._activeTrigger["focusin"===e.type?g.FOCUS:g.HOVER]=!0),t(n.getTipElement()).hasClass(f.SHOW)||n._hoverState===u.SHOW?void(n._hoverState=u.SHOW):(clearTimeout(n._timeout),n._hoverState=u.SHOW,n.config.delay&&n.config.delay.show?void(n._timeout=setTimeout(function(){n._hoverState===u.SHOW&&n.show()},n.config.delay.show)):void n.show())},p._leave=function(e,n){var i=this.constructor.DATA_KEY;if(n=n||t(e.currentTarget).data(i),n||(n=new this.constructor(e.currentTarget,this._getDelegateConfig()),t(e.currentTarget).data(i,n)),e&&(n._activeTrigger["focusout"===e.type?g.FOCUS:g.HOVER]=!1),!n._isWithActiveTrigger()){if(clearTimeout(n._timeout),n._hoverState=u.OUT,!n.config.delay||!n.config.delay.hide)return void n.hide();n._timeout=setTimeout(function(){n._hoverState===u.OUT&&n.hide()},n.config.delay.hide)}},p._isWithActiveTrigger=function(){for(var t in this._activeTrigger)if(this._activeTrigger[t])return!0;return!1},p._getConfig=function(n){return n=o({},this.constructor.Default,t(this.element).data(),"object"===(void 0===n?"undefined":_typeof(n))&&n?n:{}),"number"==typeof n.delay&&(n.delay={show:n.delay,hide:n.delay}),"number"==typeof n.title&&(n.title=n.title.toString()),"number"==typeof n.content&&(n.content=n.content.toString()),gt.typeCheckConfig(e,n,this.constructor.DefaultType),n},p._getDelegateConfig=function(){var t={};if(this.config)for(var e in this.config)this.constructor.Default[e]!==this.config[e]&&(t[e]=this.config[e]);return t},p._cleanTipClass=function(){var e=t(this.getTipElement()),n=e.attr("class").match(s);null!==n&&n.length&&e.removeClass(n.join(""))},p._handlePopperPlacementChange=function(t){var e=t.instance;this.tip=e.popper,this._cleanTipClass(),this.addAttachmentClass(this._getAttachment(t.placement))},p._fixTransition=function(){var e=this.getTipElement(),n=this.config.animation;null===e.getAttribute("x-placement")&&(t(e).removeClass(f.FADE),this.config.animation=!1,this.hide(),this.show(),this.config.animation=n)},r._jQueryInterface=function(e){return this.each(function(){var n=t(this).data("bs.tooltip"),i="object"===(void 0===e?"undefined":_typeof(e))&&e;if((n||!/dispose|hide/.test(e))&&(n||(n=new r(this,i),t(this).data("bs.tooltip",n)),"string"==typeof e)){if(void 0===n[e])throw new TypeError('No method named "'+e+'"');n[e]()}})},i(r,null,[{key:"VERSION",get:function(){return"4.1.2"}},{key:"Default",get:function(){return c}},{key:"NAME",get:function(){return e}},{key:"DATA_KEY",get:function(){return"bs.tooltip"}},{key:"Event",get:function(){return h}},{key:"EVENT_KEY",get:function(){return n}},{key:"DefaultType",get:function(){return a}}]),r}();return t.fn[e]=p._jQueryInterface,t.fn[e].Constructor=p,t.fn[e].noConflict=function(){return t.fn[e]=r,p._jQueryInterface},p}(e),Vt=function(t){var e="popover",n=".bs.popover",r=t.fn[e],a=new RegExp("(^|\\s)bs-popover\\S+","g"),l=o({},Ut.Default,{placement:"right",trigger:"click",content:"",template:'<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'}),c=o({},Ut.DefaultType,{content:"(string|element|function)"}),u={FADE:"fade",SHOW:"show"},h={TITLE:".popover-header",CONTENT:".popover-body"},f={HIDE:"hide"+n,HIDDEN:"hidden"+n,SHOW:"show"+n,SHOWN:"shown"+n,INSERTED:"inserted"+n,CLICK:"click"+n,FOCUSIN:"focusin"+n,FOCUSOUT:"focusout"+n,MOUSEENTER:"mouseenter"+n,MOUSELEAVE:"mouseleave"+n},d=function(r){function o(){return r.apply(this,arguments)||this}s(o,r);var d=o.prototype;return d.isWithContent=function(){return this.getTitle()||this._getContent()},d.addAttachmentClass=function(e){t(this.getTipElement()).addClass("bs-popover-"+e)},d.getTipElement=function(){return this.tip=this.tip||t(this.config.template)[0],this.tip},d.setContent=function(){var e=t(this.getTipElement());this.setElementContent(e.find(h.TITLE),this.getTitle());var n=this._getContent();"function"==typeof n&&(n=n.call(this.element)),this.setElementContent(e.find(h.CONTENT),n),
e.removeClass(u.FADE+" "+u.SHOW)},d._getContent=function(){return this.element.getAttribute("data-content")||this.config.content},d._cleanTipClass=function(){var e=t(this.getTipElement()),n=e.attr("class").match(a);null!==n&&n.length>0&&e.removeClass(n.join(""))},o._jQueryInterface=function(e){return this.each(function(){var n=t(this).data("bs.popover"),i="object"===(void 0===e?"undefined":_typeof(e))?e:null;if((n||!/destroy|hide/.test(e))&&(n||(n=new o(this,i),t(this).data("bs.popover",n)),"string"==typeof e)){if(void 0===n[e])throw new TypeError('No method named "'+e+'"');n[e]()}})},i(o,null,[{key:"VERSION",get:function(){return"4.1.2"}},{key:"Default",get:function(){return l}},{key:"NAME",get:function(){return e}},{key:"DATA_KEY",get:function(){return"bs.popover"}},{key:"Event",get:function(){return f}},{key:"EVENT_KEY",get:function(){return n}},{key:"DefaultType",get:function(){return c}}]),o}(Ut);return t.fn[e]=d._jQueryInterface,t.fn[e].Constructor=d,t.fn[e].noConflict=function(){return t.fn[e]=r,d._jQueryInterface},d}(e),jt=function(t){var e="scrollspy",n=t.fn[e],r={offset:10,method:"auto",target:""},s={offset:"number",method:"string",target:"(string|element)"},a={ACTIVATE:"activate.bs.scrollspy",SCROLL:"scroll.bs.scrollspy",LOAD_DATA_API:"load.bs.scrollspy.data-api"},l={DROPDOWN_ITEM:"dropdown-item",DROPDOWN_MENU:"dropdown-menu",ACTIVE:"active"},c={DATA_SPY:'[data-spy="scroll"]',ACTIVE:".active",NAV_LIST_GROUP:".nav, .list-group",NAV_LINKS:".nav-link",NAV_ITEMS:".nav-item",LIST_ITEMS:".list-group-item",DROPDOWN:".dropdown",DROPDOWN_ITEMS:".dropdown-item",DROPDOWN_TOGGLE:".dropdown-toggle"},u={OFFSET:"offset",POSITION:"position"},h=function(){function n(e,n){var i=this;this._element=e,this._scrollElement="BODY"===e.tagName?window:e,this._config=this._getConfig(n),this._selector=this._config.target+" "+c.NAV_LINKS+","+this._config.target+" "+c.LIST_ITEMS+","+this._config.target+" "+c.DROPDOWN_ITEMS,this._offsets=[],this._targets=[],this._activeTarget=null,this._scrollHeight=0,t(this._scrollElement).on(a.SCROLL,function(t){return i._process(t)}),this.refresh(),this._process()}var h=n.prototype;return h.refresh=function(){var e=this,n=this._scrollElement===this._scrollElement.window?u.OFFSET:u.POSITION,i="auto"===this._config.method?n:this._config.method,r=i===u.POSITION?this._getScrollTop():0;this._offsets=[],this._targets=[],this._scrollHeight=this._getScrollHeight(),[].slice.call(document.querySelectorAll(this._selector)).map(function(e){var n,o=gt.getSelectorFromElement(e);if(o&&(n=document.querySelector(o)),n){var s=n.getBoundingClientRect();if(s.width||s.height)return[t(n)[i]().top+r,o]}return null}).filter(function(t){return t}).sort(function(t,e){return t[0]-e[0]}).forEach(function(t){e._offsets.push(t[0]),e._targets.push(t[1])})},h.dispose=function(){t.removeData(this._element,"bs.scrollspy"),t(this._scrollElement).off(".bs.scrollspy"),this._element=null,this._scrollElement=null,this._config=null,this._selector=null,this._offsets=null,this._targets=null,this._activeTarget=null,this._scrollHeight=null},h._getConfig=function(n){if(n=o({},r,"object"===(void 0===n?"undefined":_typeof(n))&&n?n:{}),"string"!=typeof n.target){var i=t(n.target).attr("id");i||(i=gt.getUID(e),t(n.target).attr("id",i)),n.target="#"+i}return gt.typeCheckConfig(e,n,s),n},h._getScrollTop=function(){return this._scrollElement===window?this._scrollElement.pageYOffset:this._scrollElement.scrollTop},h._getScrollHeight=function(){return this._scrollElement.scrollHeight||Math.max(document.body.scrollHeight,document.documentElement.scrollHeight)},h._getOffsetHeight=function(){return this._scrollElement===window?window.innerHeight:this._scrollElement.getBoundingClientRect().height},h._process=function(){var t=this._getScrollTop()+this._config.offset,e=this._getScrollHeight(),n=this._config.offset+e-this._getOffsetHeight();if(this._scrollHeight!==e&&this.refresh(),t>=n){var i=this._targets[this._targets.length-1];return void(this._activeTarget!==i&&this._activate(i))}if(this._activeTarget&&t<this._offsets[0]&&this._offsets[0]>0)return this._activeTarget=null,void this._clear();for(var r=this._offsets.length,o=r;o--;){this._activeTarget!==this._targets[o]&&t>=this._offsets[o]&&(void 0===this._offsets[o+1]||t<this._offsets[o+1])&&this._activate(this._targets[o])}},h._activate=function(e){this._activeTarget=e,this._clear();var n=this._selector.split(",");n=n.map(function(t){return t+'[data-target="'+e+'"],'+t+'[href="'+e+'"]'});var i=t([].slice.call(document.querySelectorAll(n.join(","))));i.hasClass(l.DROPDOWN_ITEM)?(i.closest(c.DROPDOWN).find(c.DROPDOWN_TOGGLE).addClass(l.ACTIVE),i.addClass(l.ACTIVE)):(i.addClass(l.ACTIVE),i.parents(c.NAV_LIST_GROUP).prev(c.NAV_LINKS+", "+c.LIST_ITEMS).addClass(l.ACTIVE),i.parents(c.NAV_LIST_GROUP).prev(c.NAV_ITEMS).children(c.NAV_LINKS).addClass(l.ACTIVE)),t(this._scrollElement).trigger(a.ACTIVATE,{relatedTarget:e})},h._clear=function(){var e=[].slice.call(document.querySelectorAll(this._selector));t(e).filter(c.ACTIVE).removeClass(l.ACTIVE)},n._jQueryInterface=function(e){return this.each(function(){var i=t(this).data("bs.scrollspy"),r="object"===(void 0===e?"undefined":_typeof(e))&&e;if(i||(i=new n(this,r),t(this).data("bs.scrollspy",i)),"string"==typeof e){if(void 0===i[e])throw new TypeError('No method named "'+e+'"');i[e]()}})},i(n,null,[{key:"VERSION",get:function(){return"4.1.2"}},{key:"Default",get:function(){return r}}]),n}();return t(window).on(a.LOAD_DATA_API,function(){for(var e=[].slice.call(document.querySelectorAll(c.DATA_SPY)),n=e.length,i=n;i--;){var r=t(e[i]);h._jQueryInterface.call(r,r.data())}}),t.fn[e]=h._jQueryInterface,t.fn[e].Constructor=h,t.fn[e].noConflict=function(){return t.fn[e]=n,h._jQueryInterface},h}(e),xt=function(t){var e=t.fn.tab,n={HIDE:"hide.bs.tab",HIDDEN:"hidden.bs.tab",SHOW:"show.bs.tab",SHOWN:"shown.bs.tab",CLICK_DATA_API:"click.bs.tab.data-api"},r={DROPDOWN_MENU:"dropdown-menu",ACTIVE:"active",DISABLED:"disabled",FADE:"fade",SHOW:"show"},o={DROPDOWN:".dropdown",NAV_LIST_GROUP:".nav, .list-group",ACTIVE:".active",ACTIVE_UL:"> li > .active",DATA_TOGGLE:'[data-toggle="tab"], [data-toggle="pill"], [data-toggle="list"]',DROPDOWN_TOGGLE:".dropdown-toggle",DROPDOWN_ACTIVE_CHILD:"> .dropdown-menu .active"},s=function(){function e(t){this._element=t}var s=e.prototype;return s.show=function(){var e=this;if(!(this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE&&t(this._element).hasClass(r.ACTIVE)||t(this._element).hasClass(r.DISABLED))){var i,s,a=t(this._element).closest(o.NAV_LIST_GROUP)[0],l=gt.getSelectorFromElement(this._element);if(a){var c="UL"===a.nodeName?o.ACTIVE_UL:o.ACTIVE;s=t.makeArray(t(a).find(c)),s=s[s.length-1]}var u=t.Event(n.HIDE,{relatedTarget:this._element}),h=t.Event(n.SHOW,{relatedTarget:s});if(s&&t(s).trigger(u),t(this._element).trigger(h),!h.isDefaultPrevented()&&!u.isDefaultPrevented()){l&&(i=document.querySelector(l)),this._activate(this._element,a);var f=function(){var i=t.Event(n.HIDDEN,{relatedTarget:e._element}),r=t.Event(n.SHOWN,{relatedTarget:s});t(s).trigger(i),t(e._element).trigger(r)};i?this._activate(i,i.parentNode,f):f()}}},s.dispose=function(){t.removeData(this._element,"bs.tab"),this._element=null},s._activate=function(e,n,i){var s,a=this;s="UL"===n.nodeName?t(n).find(o.ACTIVE_UL):t(n).children(o.ACTIVE);var l=s[0],c=i&&l&&t(l).hasClass(r.FADE),u=function(){return a._transitionComplete(e,l,i)};if(l&&c){var h=gt.getTransitionDurationFromElement(l);t(l).one(gt.TRANSITION_END,u).emulateTransitionEnd(h)}else u()},s._transitionComplete=function(e,n,i){if(n){t(n).removeClass(r.SHOW+" "+r.ACTIVE);var s=t(n.parentNode).find(o.DROPDOWN_ACTIVE_CHILD)[0];s&&t(s).removeClass(r.ACTIVE),"tab"===n.getAttribute("role")&&n.setAttribute("aria-selected",!1)}if(t(e).addClass(r.ACTIVE),"tab"===e.getAttribute("role")&&e.setAttribute("aria-selected",!0),gt.reflow(e),t(e).addClass(r.SHOW),e.parentNode&&t(e.parentNode).hasClass(r.DROPDOWN_MENU)){var a=t(e).closest(o.DROPDOWN)[0];if(a){var l=[].slice.call(a.querySelectorAll(o.DROPDOWN_TOGGLE));t(l).addClass(r.ACTIVE)}e.setAttribute("aria-expanded",!0)}i&&i()},e._jQueryInterface=function(n){return this.each(function(){var i=t(this),r=i.data("bs.tab");if(r||(r=new e(this),i.data("bs.tab",r)),"string"==typeof n){if(void 0===r[n])throw new TypeError('No method named "'+n+'"');r[n]()}})},i(e,null,[{key:"VERSION",get:function(){return"4.1.2"}}]),e}();return t(document).on(n.CLICK_DATA_API,o.DATA_TOGGLE,function(e){e.preventDefault(),s._jQueryInterface.call(t(this),"show")}),t.fn.tab=s._jQueryInterface,t.fn.tab.Constructor=s,t.fn.tab.noConflict=function(){return t.fn.tab=e,s._jQueryInterface},s}(e);!function(t){if(void 0===t)throw new TypeError("Bootstrap's JavaScript requires jQuery. jQuery must be included before Bootstrap's JavaScript.");var e=t.fn.jquery.split(" ")[0].split(".");if(e[0]<2&&e[1]<9||1===e[0]&&9===e[1]&&e[2]<1||e[0]>=4)throw new Error("Bootstrap's JavaScript requires at least jQuery v1.9.1 but less than v4.0.0")}(e),t.Util=gt,t.Alert=pt,t.Button=mt,t.Carousel=_t,t.Collapse=vt,t.Dropdown=Ft,t.Modal=Mt,t.Popover=Vt,t.Scrollspy=jt,t.Tab=xt,t.Tooltip=Ut,Object.defineProperty(t,"__esModule",{value:!0})}),function(t,e){"object"===("undefined"==typeof exports?"undefined":_typeof(exports))&&"undefined"!=typeof module?e(exports,require("jquery"),require("popper.js")):"function"==typeof define&&define.amd?define(["exports","jquery","popper.js"],e):e(t.bootstrap={},t.jQuery,t.Popper)}(void 0,function(t,e,n){function i(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}function r(t,e,n){return e&&i(t.prototype,e),n&&i(t,n),t}function o(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function s(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{},i=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(i=i.concat(Object.getOwnPropertySymbols(n).filter(function(t){return Object.getOwnPropertyDescriptor(n,t).enumerable}))),i.forEach(function(e){o(t,e,n[e])})}return t}function a(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}e=e&&e.hasOwnProperty("default")?e.default:e,n=n&&n.hasOwnProperty("default")?n.default:n;var l=function(t){function e(t){return{}.toString.call(t).match(/\s([a-z]+)/i)[1].toLowerCase()}function n(){return{bindType:r,delegateType:r,handle:function(e){if(t(e.target).is(this))return e.handleObj.handler.apply(this,arguments)}}}function i(e){var n=this,i=!1;return t(this).one(o.TRANSITION_END,function(){i=!0}),setTimeout(function(){i||o.triggerTransitionEnd(n)},e),this}var r="transitionend",o={TRANSITION_END:"bsTransitionEnd",getUID:function(t){do{t+=~~(1e6*Math.random())}while(document.getElementById(t));return t},getSelectorFromElement:function(t){var e=t.getAttribute("data-target");e&&"#"!==e||(e=t.getAttribute("href")||"");try{return document.querySelector(e)?e:null}catch(t){return null}},getTransitionDurationFromElement:function(e){if(!e)return 0;var n=t(e).css("transition-duration");return parseFloat(n)?(n=n.split(",")[0],1e3*parseFloat(n)):0},reflow:function(t){return t.offsetHeight},triggerTransitionEnd:function(e){t(e).trigger(r)},supportsTransitionEnd:function(){return Boolean(r)},isElement:function(t){return(t[0]||t).nodeType},typeCheckConfig:function(t,n,i){for(var r in i)if(Object.prototype.hasOwnProperty.call(i,r)){var s=i[r],a=n[r],l=a&&o.isElement(a)?"element":e(a);if(!new RegExp(s).test(l))throw new Error(t.toUpperCase()+': Option "'+r+'" provided type "'+l+'" but expected type "'+s+'".')}}};return function(){t.fn.emulateTransitionEnd=i,t.event.special[o.TRANSITION_END]=n()}(),o}(e),c=function(t){var e="alert",n=t.fn[e],i={DISMISS:'[data-dismiss="alert"]'},o={CLOSE:"close.bs.alert",CLOSED:"closed.bs.alert",CLICK_DATA_API:"click.bs.alert.data-api"},s={ALERT:"alert",FADE:"fade",SHOW:"show"},a=function(){function e(t){this._element=t}var n=e.prototype;return n.close=function(t){var e=this._element;t&&(e=this._getRootElement(t)),this._triggerCloseEvent(e).isDefaultPrevented()||this._removeElement(e)},n.dispose=function(){t.removeData(this._element,"bs.alert"),this._element=null},n._getRootElement=function(e){var n=l.getSelectorFromElement(e),i=!1;return n&&(i=document.querySelector(n)),i||(i=t(e).closest("."+s.ALERT)[0]),i},n._triggerCloseEvent=function(e){var n=t.Event(o.CLOSE);return t(e).trigger(n),n},n._removeElement=function(e){var n=this;if(t(e).removeClass(s.SHOW),!t(e).hasClass(s.FADE))return void this._destroyElement(e);var i=l.getTransitionDurationFromElement(e);t(e).one(l.TRANSITION_END,function(t){return n._destroyElement(e,t)}).emulateTransitionEnd(i)},n._destroyElement=function(e){t(e).detach().trigger(o.CLOSED).remove()},e._jQueryInterface=function(n){return this.each(function(){var i=t(this),r=i.data("bs.alert");r||(r=new e(this),i.data("bs.alert",r)),"close"===n&&r[n](this)})},e._handleDismiss=function(t){return function(e){e&&e.preventDefault(),t.close(this)}},r(e,null,[{key:"VERSION",get:function(){return"4.1.2"}}]),e}();return t(document).on(o.CLICK_DATA_API,i.DISMISS,a._handleDismiss(new a)),t.fn[e]=a._jQueryInterface,t.fn[e].Constructor=a,t.fn[e].noConflict=function(){return t.fn[e]=n,a._jQueryInterface},a}(e),u=function(t){var e="button",n=t.fn[e],i={ACTIVE:"active",BUTTON:"btn",FOCUS:"focus"},o={DATA_TOGGLE_CARROT:'[data-toggle^="button"]',DATA_TOGGLE:'[data-toggle="buttons"]',INPUT:"input",ACTIVE:".active",BUTTON:".btn"},s={CLICK_DATA_API:"click.bs.button.data-api",FOCUS_BLUR_DATA_API:"focus.bs.button.data-api blur.bs.button.data-api"},a=function(){function e(t){this._element=t}var n=e.prototype;return n.toggle=function(){var e=!0,n=!0,r=t(this._element).closest(o.DATA_TOGGLE)[0];if(r){var s=this._element.querySelector(o.INPUT);if(s){if("radio"===s.type)if(s.checked&&this._element.classList.contains(i.ACTIVE))e=!1;else{var a=r.querySelector(o.ACTIVE);a&&t(a).removeClass(i.ACTIVE)}if(e){if(s.hasAttribute("disabled")||r.hasAttribute("disabled")||s.classList.contains("disabled")||r.classList.contains("disabled"))return;s.checked=!this._element.classList.contains(i.ACTIVE),t(s).trigger("change")}s.focus(),n=!1}}n&&this._element.setAttribute("aria-pressed",!this._element.classList.contains(i.ACTIVE)),e&&t(this._element).toggleClass(i.ACTIVE)},n.dispose=function(){t.removeData(this._element,"bs.button"),this._element=null},e._jQueryInterface=function(n){return this.each(function(){var i=t(this).data("bs.button");i||(i=new e(this),t(this).data("bs.button",i)),"toggle"===n&&i[n]()})},r(e,null,[{key:"VERSION",get:function(){return"4.1.2"}}]),e}();return t(document).on(s.CLICK_DATA_API,o.DATA_TOGGLE_CARROT,function(e){e.preventDefault();var n=e.target;t(n).hasClass(i.BUTTON)||(n=t(n).closest(o.BUTTON)),a._jQueryInterface.call(t(n),"toggle")}).on(s.FOCUS_BLUR_DATA_API,o.DATA_TOGGLE_CARROT,function(e){var n=t(e.target).closest(o.BUTTON)[0];t(n).toggleClass(i.FOCUS,/^focus(in)?$/.test(e.type))}),t.fn[e]=a._jQueryInterface,t.fn[e].Constructor=a,t.fn[e].noConflict=function(){return t.fn[e]=n,a._jQueryInterface},a}(e),h=function(t){var e="carousel",n="bs.carousel",i="."+n,o=t.fn[e],a={interval:5e3,keyboard:!0,slide:!1,pause:"hover",wrap:!0},c={interval:"(number|boolean)",keyboard:"boolean",slide:"(boolean|string)",pause:"(string|boolean)",wrap:"boolean"},u={NEXT:"next",PREV:"prev",LEFT:"left",RIGHT:"right"},h={SLIDE:"slide"+i,SLID:"slid"+i,KEYDOWN:"keydown"+i,MOUSEENTER:"mouseenter"+i,MOUSELEAVE:"mouseleave"+i,TOUCHEND:"touchend"+i,LOAD_DATA_API:"load.bs.carousel.data-api",CLICK_DATA_API:"click.bs.carousel.data-api"},f={CAROUSEL:"carousel",ACTIVE:"active",SLIDE:"slide",RIGHT:"carousel-item-right",LEFT:"carousel-item-left",NEXT:"carousel-item-next",PREV:"carousel-item-prev",ITEM:"carousel-item"},d={ACTIVE:".active",ACTIVE_ITEM:".active.carousel-item",ITEM:".carousel-item",NEXT_PREV:".carousel-item-next, .carousel-item-prev",INDICATORS:".carousel-indicators",DATA_SLIDE:"[data-slide], [data-slide-to]",DATA_RIDE:'[data-ride="carousel"]'},g=function(){function o(e,n){this._items=null,this._interval=null,this._activeElement=null,this._isPaused=!1,this._isSliding=!1,this.touchTimeout=null,this._config=this._getConfig(n),this._element=t(e)[0],this._indicatorsElement=this._element.querySelector(d.INDICATORS),this._addEventListeners()}var g=o.prototype;return g.next=function(){this._isSliding||this._slide(u.NEXT)},g.nextWhenVisible=function(){!document.hidden&&t(this._element).is(":visible")&&"hidden"!==t(this._element).css("visibility")&&this.next()},g.prev=function(){this._isSliding||this._slide(u.PREV)},g.pause=function(t){t||(this._isPaused=!0),this._element.querySelector(d.NEXT_PREV)&&(l.triggerTransitionEnd(this._element),this.cycle(!0)),clearInterval(this._interval),this._interval=null},g.cycle=function(t){t||(this._isPaused=!1),this._interval&&(clearInterval(this._interval),this._interval=null),this._config.interval&&!this._isPaused&&(this._interval=setInterval((document.visibilityState?this.nextWhenVisible:this.next).bind(this),this._config.interval))},g.to=function(e){var n=this;this._activeElement=this._element.querySelector(d.ACTIVE_ITEM);var i=this._getItemIndex(this._activeElement);if(!(e>this._items.length-1||e<0)){if(this._isSliding)return void t(this._element).one(h.SLID,function(){return n.to(e)});if(i===e)return this.pause(),void this.cycle();var r=e>i?u.NEXT:u.PREV;this._slide(r,this._items[e])}},g.dispose=function(){t(this._element).off(i),t.removeData(this._element,n),this._items=null,this._config=null,this._element=null,this._interval=null,this._isPaused=null,this._isSliding=null,this._activeElement=null,this._indicatorsElement=null},g._getConfig=function(t){return t=s({},a,t),l.typeCheckConfig(e,t,c),t},g._addEventListeners=function(){var e=this;this._config.keyboard&&t(this._element).on(h.KEYDOWN,function(t){return e._keydown(t)}),"hover"===this._config.pause&&(t(this._element).on(h.MOUSEENTER,function(t){return e.pause(t)}).on(h.MOUSELEAVE,function(t){return e.cycle(t)}),"ontouchstart"in document.documentElement&&t(this._element).on(h.TOUCHEND,function(){e.pause(),e.touchTimeout&&clearTimeout(e.touchTimeout),e.touchTimeout=setTimeout(function(t){return e.cycle(t)},500+e._config.interval)}))},g._keydown=function(t){if(!/input|textarea/i.test(t.target.tagName))switch(t.which){case 37:t.preventDefault(),this.prev();break;case 39:t.preventDefault(),this.next()}},g._getItemIndex=function(t){return this._items=t&&t.parentNode?[].slice.call(t.parentNode.querySelectorAll(d.ITEM)):[],this._items.indexOf(t)},g._getItemByDirection=function(t,e){var n=t===u.NEXT,i=t===u.PREV,r=this._getItemIndex(e),o=this._items.length-1;if((i&&0===r||n&&r===o)&&!this._config.wrap)return e;var s=t===u.PREV?-1:1,a=(r+s)%this._items.length;return-1===a?this._items[this._items.length-1]:this._items[a]},g._triggerSlideEvent=function(e,n){var i=this._getItemIndex(e),r=this._getItemIndex(this._element.querySelector(d.ACTIVE_ITEM)),o=t.Event(h.SLIDE,{relatedTarget:e,direction:n,from:r,to:i});return t(this._element).trigger(o),o},g._setActiveIndicatorElement=function(e){if(this._indicatorsElement){var n=[].slice.call(this._indicatorsElement.querySelectorAll(d.ACTIVE));t(n).removeClass(f.ACTIVE);var i=this._indicatorsElement.children[this._getItemIndex(e)];i&&t(i).addClass(f.ACTIVE)}},g._slide=function(e,n){var i,r,o,s=this,a=this._element.querySelector(d.ACTIVE_ITEM),c=this._getItemIndex(a),g=n||a&&this._getItemByDirection(e,a),p=this._getItemIndex(g),m=Boolean(this._interval);if(e===u.NEXT?(i=f.LEFT,r=f.NEXT,o=u.LEFT):(i=f.RIGHT,r=f.PREV,o=u.RIGHT),g&&t(g).hasClass(f.ACTIVE))return void(this._isSliding=!1);if(!this._triggerSlideEvent(g,o).isDefaultPrevented()&&a&&g){this._isSliding=!0,m&&this.pause(),this._setActiveIndicatorElement(g);var _=t.Event(h.SLID,{relatedTarget:g,direction:o,from:c,to:p});if(t(this._element).hasClass(f.SLIDE)){t(g).addClass(r),l.reflow(g),t(a).addClass(i),t(g).addClass(i);var v=l.getTransitionDurationFromElement(a);t(a).one(l.TRANSITION_END,function(){t(g).removeClass(i+" "+r).addClass(f.ACTIVE),t(a).removeClass(f.ACTIVE+" "+r+" "+i),s._isSliding=!1,setTimeout(function(){return t(s._element).trigger(_)},0)}).emulateTransitionEnd(v)}else t(a).removeClass(f.ACTIVE),t(g).addClass(f.ACTIVE),this._isSliding=!1,t(this._element).trigger(_);m&&this.cycle()}},o._jQueryInterface=function(e){return this.each(function(){var i=t(this).data(n),r=s({},a,t(this).data());"object"===(void 0===e?"undefined":_typeof(e))&&(r=s({},r,e));var l="string"==typeof e?e:r.slide;if(i||(i=new o(this,r),t(this).data(n,i)),"number"==typeof e)i.to(e);else if("string"==typeof l){if(void 0===i[l])throw new TypeError('No method named "'+l+'"');i[l]()}else r.interval&&(i.pause(),i.cycle())})},o._dataApiClickHandler=function(e){var i=l.getSelectorFromElement(this);if(i){var r=t(i)[0];if(r&&t(r).hasClass(f.CAROUSEL)){var a=s({},t(r).data(),t(this).data()),c=this.getAttribute("data-slide-to");c&&(a.interval=!1),o._jQueryInterface.call(t(r),a),c&&t(r).data(n).to(c),e.preventDefault()}}},r(o,null,[{key:"VERSION",get:function(){return"4.1.2"}},{key:"Default",get:function(){return a}}]),o}();return t(document).on(h.CLICK_DATA_API,d.DATA_SLIDE,g._dataApiClickHandler),t(window).on(h.LOAD_DATA_API,function(){for(var e=[].slice.call(document.querySelectorAll(d.DATA_RIDE)),n=0,i=e.length;n<i;n++){var r=t(e[n]);g._jQueryInterface.call(r,r.data())}}),t.fn[e]=g._jQueryInterface,t.fn[e].Constructor=g,t.fn[e].noConflict=function(){return t.fn[e]=o,g._jQueryInterface},g}(e),f=function(t){var e="collapse",n="bs.collapse",i=t.fn[e],o={toggle:!0,parent:""},a={toggle:"boolean",parent:"(string|element)"},c={SHOW:"show.bs.collapse",SHOWN:"shown.bs.collapse",HIDE:"hide.bs.collapse",HIDDEN:"hidden.bs.collapse",CLICK_DATA_API:"click.bs.collapse.data-api"},u={SHOW:"show",COLLAPSE:"collapse",COLLAPSING:"collapsing",COLLAPSED:"collapsed"},h={WIDTH:"width",HEIGHT:"height"},f={ACTIVES:".show, .collapsing",DATA_TOGGLE:'[data-toggle="collapse"]'},d=function(){function i(e,n){this._isTransitioning=!1,this._element=e,this._config=this._getConfig(n),this._triggerArray=t.makeArray(document.querySelectorAll('[data-toggle="collapse"][href="#'+e.id+'"],[data-toggle="collapse"][data-target="#'+e.id+'"]'));for(var i=[].slice.call(document.querySelectorAll(f.DATA_TOGGLE)),r=0,o=i.length;r<o;r++){var s=i[r],a=l.getSelectorFromElement(s),c=[].slice.call(document.querySelectorAll(a)).filter(function(t){return t===e});null!==a&&c.length>0&&(this._selector=a,this._triggerArray.push(s))}this._parent=this._config.parent?this._getParent():null,this._config.parent||this._addAriaAndCollapsedClass(this._element,this._triggerArray),this._config.toggle&&this.toggle()}var d=i.prototype;return d.toggle=function(){t(this._element).hasClass(u.SHOW)?this.hide():this.show()},d.show=function(){var e=this;if(!this._isTransitioning&&!t(this._element).hasClass(u.SHOW)){var r,o;if(this._parent&&(r=[].slice.call(this._parent.querySelectorAll(f.ACTIVES)).filter(function(t){return t.getAttribute("data-parent")===e._config.parent}),0===r.length&&(r=null)),!(r&&(o=t(r).not(this._selector).data(n))&&o._isTransitioning)){var s=t.Event(c.SHOW);if(t(this._element).trigger(s),!s.isDefaultPrevented()){r&&(i._jQueryInterface.call(t(r).not(this._selector),"hide"),o||t(r).data(n,null));var a=this._getDimension();t(this._element).removeClass(u.COLLAPSE).addClass(u.COLLAPSING),this._element.style[a]=0,this._triggerArray.length&&t(this._triggerArray).removeClass(u.COLLAPSED).attr("aria-expanded",!0),this.setTransitioning(!0);var h=function(){t(e._element).removeClass(u.COLLAPSING).addClass(u.COLLAPSE).addClass(u.SHOW),e._element.style[a]="",e.setTransitioning(!1),t(e._element).trigger(c.SHOWN)},d=a[0].toUpperCase()+a.slice(1),g="scroll"+d,p=l.getTransitionDurationFromElement(this._element);t(this._element).one(l.TRANSITION_END,h).emulateTransitionEnd(p),this._element.style[a]=this._element[g]+"px"}}}},d.hide=function(){var e=this;if(!this._isTransitioning&&t(this._element).hasClass(u.SHOW)){var n=t.Event(c.HIDE);if(t(this._element).trigger(n),!n.isDefaultPrevented()){var i=this._getDimension();this._element.style[i]=this._element.getBoundingClientRect()[i]+"px",l.reflow(this._element),t(this._element).addClass(u.COLLAPSING).removeClass(u.COLLAPSE).removeClass(u.SHOW);var r=this._triggerArray.length;if(r>0)for(var o=0;o<r;o++){var s=this._triggerArray[o],a=l.getSelectorFromElement(s);if(null!==a){var h=t([].slice.call(document.querySelectorAll(a)));h.hasClass(u.SHOW)||t(s).addClass(u.COLLAPSED).attr("aria-expanded",!1)}}this.setTransitioning(!0);var f=function(){e.setTransitioning(!1),t(e._element).removeClass(u.COLLAPSING).addClass(u.COLLAPSE).trigger(c.HIDDEN)};this._element.style[i]="";var d=l.getTransitionDurationFromElement(this._element);t(this._element).one(l.TRANSITION_END,f).emulateTransitionEnd(d)}}},d.setTransitioning=function(t){this._isTransitioning=t},d.dispose=function(){t.removeData(this._element,n),this._config=null,this._parent=null,this._element=null,this._triggerArray=null,this._isTransitioning=null},d._getConfig=function(t){return t=s({},o,t),t.toggle=Boolean(t.toggle),l.typeCheckConfig(e,t,a),t},d._getDimension=function(){return t(this._element).hasClass(h.WIDTH)?h.WIDTH:h.HEIGHT},d._getParent=function(){var e=this,n=null;l.isElement(this._config.parent)?(n=this._config.parent,void 0!==this._config.parent.jquery&&(n=this._config.parent[0])):n=document.querySelector(this._config.parent);var r='[data-toggle="collapse"][data-parent="'+this._config.parent+'"]',o=[].slice.call(n.querySelectorAll(r));return t(o).each(function(t,n){e._addAriaAndCollapsedClass(i._getTargetFromElement(n),[n])}),n},d._addAriaAndCollapsedClass=function(e,n){if(e){var i=t(e).hasClass(u.SHOW);n.length&&t(n).toggleClass(u.COLLAPSED,!i).attr("aria-expanded",i)}},i._getTargetFromElement=function(t){var e=l.getSelectorFromElement(t);return e?document.querySelector(e):null},i._jQueryInterface=function(e){return this.each(function(){var r=t(this),a=r.data(n),l=s({},o,r.data(),"object"===(void 0===e?"undefined":_typeof(e))&&e?e:{});if(!a&&l.toggle&&/show|hide/.test(e)&&(l.toggle=!1),a||(a=new i(this,l),r.data(n,a)),"string"==typeof e){if(void 0===a[e])throw new TypeError('No method named "'+e+'"');a[e]()}})},r(i,null,[{key:"VERSION",get:function(){return"4.1.2"}},{key:"Default",get:function(){return o}}]),i}();return t(document).on(c.CLICK_DATA_API,f.DATA_TOGGLE,function(e){"A"===e.currentTarget.tagName&&e.preventDefault();var i=t(this),r=l.getSelectorFromElement(this),o=[].slice.call(document.querySelectorAll(r));t(o).each(function(){var e=t(this),r=e.data(n),o=r?"toggle":i.data();d._jQueryInterface.call(e,o)})}),t.fn[e]=d._jQueryInterface,t.fn[e].Constructor=d,t.fn[e].noConflict=function(){return t.fn[e]=i,d._jQueryInterface},d}(e),d=function(t){var e="dropdown",i="bs.dropdown",o="."+i,a=t.fn[e],c=new RegExp("38|40|27"),u={HIDE:"hide"+o,HIDDEN:"hidden"+o,SHOW:"show"+o,SHOWN:"shown"+o,CLICK:"click"+o,CLICK_DATA_API:"click.bs.dropdown.data-api",KEYDOWN_DATA_API:"keydown.bs.dropdown.data-api",KEYUP_DATA_API:"keyup.bs.dropdown.data-api"},h={DISABLED:"disabled",SHOW:"show",DROPUP:"dropup",DROPRIGHT:"dropright",DROPLEFT:"dropleft",MENURIGHT:"dropdown-menu-right",MENULEFT:"dropdown-menu-left",POSITION_STATIC:"position-static"},f={DATA_TOGGLE:'[data-toggle="dropdown"]',FORM_CHILD:".dropdown form",MENU:".dropdown-menu",NAVBAR_NAV:".navbar-nav",VISIBLE_ITEMS:".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)"},d={TOP:"top-start",TOPEND:"top-end",BOTTOM:"bottom-start",BOTTOMEND:"bottom-end",RIGHT:"right-start",RIGHTEND:"right-end",LEFT:"left-start",LEFTEND:"left-end"},g={offset:0,flip:!0,boundary:"scrollParent",reference:"toggle",display:"dynamic"},p={offset:"(number|string|function)",flip:"boolean",boundary:"(string|element)",reference:"(string|element)",display:"string"},m=function(){function a(t,e){this._element=t,this._popper=null,this._config=this._getConfig(e),this._menu=this._getMenuElement(),this._inNavbar=this._detectNavbar(),this._addEventListeners()}var m=a.prototype;return m.toggle=function(){if(!this._element.disabled&&!t(this._element).hasClass(h.DISABLED)){var e=a._getParentFromElement(this._element),i=t(this._menu).hasClass(h.SHOW);if(a._clearMenus(),!i){var r={relatedTarget:this._element},o=t.Event(u.SHOW,r);if(t(e).trigger(o),!o.isDefaultPrevented()){if(!this._inNavbar){if(void 0===n)throw new TypeError("Bootstrap dropdown require Popper.js (https://popper.js.org)");var s=this._element;"parent"===this._config.reference?s=e:l.isElement(this._config.reference)&&(s=this._config.reference,void 0!==this._config.reference.jquery&&(s=this._config.reference[0])),"scrollParent"!==this._config.boundary&&t(e).addClass(h.POSITION_STATIC),this._popper=new n(s,this._menu,this._getPopperConfig())}"ontouchstart"in document.documentElement&&0===t(e).closest(f.NAVBAR_NAV).length&&t(document.body).children().on("mouseover",null,t.noop),this._element.focus(),this._element.setAttribute("aria-expanded",!0),t(this._menu).toggleClass(h.SHOW),t(e).toggleClass(h.SHOW).trigger(t.Event(u.SHOWN,r))}}}},m.dispose=function(){t.removeData(this._element,i),t(this._element).off(o),this._element=null,this._menu=null,null!==this._popper&&(this._popper.destroy(),this._popper=null)},m.update=function(){this._inNavbar=this._detectNavbar(),null!==this._popper&&this._popper.scheduleUpdate()},m._addEventListeners=function(){var e=this;t(this._element).on(u.CLICK,function(t){t.preventDefault(),t.stopPropagation(),e.toggle()})},m._getConfig=function(n){return n=s({},this.constructor.Default,t(this._element).data(),n),l.typeCheckConfig(e,n,this.constructor.DefaultType),n},m._getMenuElement=function(){if(!this._menu){var t=a._getParentFromElement(this._element);t&&(this._menu=t.querySelector(f.MENU))}return this._menu},m._getPlacement=function(){var e=t(this._element.parentNode),n=d.BOTTOM;return e.hasClass(h.DROPUP)?(n=d.TOP,t(this._menu).hasClass(h.MENURIGHT)&&(n=d.TOPEND)):e.hasClass(h.DROPRIGHT)?n=d.RIGHT:e.hasClass(h.DROPLEFT)?n=d.LEFT:t(this._menu).hasClass(h.MENURIGHT)&&(n=d.BOTTOMEND),n},m._detectNavbar=function(){return t(this._element).closest(".navbar").length>0},m._getPopperConfig=function(){var t=this,e={};"function"==typeof this._config.offset?e.fn=function(e){return e.offsets=s({},e.offsets,t._config.offset(e.offsets)||{}),e}:e.offset=this._config.offset;var n={placement:this._getPlacement(),modifiers:{offset:e,flip:{enabled:this._config.flip},preventOverflow:{boundariesElement:this._config.boundary}}};return"static"===this._config.display&&(n.modifiers.applyStyle={enabled:!1}),n},a._jQueryInterface=function(e){return this.each(function(){var n=t(this).data(i),r="object"===(void 0===e?"undefined":_typeof(e))?e:null;if(n||(n=new a(this,r),t(this).data(i,n)),"string"==typeof e){if(void 0===n[e])throw new TypeError('No method named "'+e+'"');n[e]()}})},a._clearMenus=function(e){if(!e||3!==e.which&&("keyup"!==e.type||9===e.which))for(var n=[].slice.call(document.querySelectorAll(f.DATA_TOGGLE)),r=0,o=n.length;r<o;r++){var s=a._getParentFromElement(n[r]),l=t(n[r]).data(i),c={relatedTarget:n[r]};if(e&&"click"===e.type&&(c.clickEvent=e),l){var d=l._menu;if(t(s).hasClass(h.SHOW)&&!(e&&("click"===e.type&&/input|textarea/i.test(e.target.tagName)||"keyup"===e.type&&9===e.which)&&t.contains(s,e.target))){var g=t.Event(u.HIDE,c);t(s).trigger(g),g.isDefaultPrevented()||("ontouchstart"in document.documentElement&&t(document.body).children().off("mouseover",null,t.noop),n[r].setAttribute("aria-expanded","false"),t(d).removeClass(h.SHOW),t(s).removeClass(h.SHOW).trigger(t.Event(u.HIDDEN,c)))}}}},a._getParentFromElement=function(t){var e,n=l.getSelectorFromElement(t);return n&&(e=document.querySelector(n)),e||t.parentNode},a._dataApiKeydownHandler=function(e){
if((/input|textarea/i.test(e.target.tagName)?!(32===e.which||27!==e.which&&(40!==e.which&&38!==e.which||t(e.target).closest(f.MENU).length)):c.test(e.which))&&(e.preventDefault(),e.stopPropagation(),!this.disabled&&!t(this).hasClass(h.DISABLED))){var n=a._getParentFromElement(this),i=t(n).hasClass(h.SHOW);if(!i&&(27!==e.which||32!==e.which)||i&&(27===e.which||32===e.which)){if(27===e.which){var r=n.querySelector(f.DATA_TOGGLE);t(r).trigger("focus")}return void t(this).trigger("click")}var o=[].slice.call(n.querySelectorAll(f.VISIBLE_ITEMS));if(0!==o.length){var s=o.indexOf(e.target);38===e.which&&s>0&&s--,40===e.which&&s<o.length-1&&s++,s<0&&(s=0),o[s].focus()}}},r(a,null,[{key:"VERSION",get:function(){return"4.1.2"}},{key:"Default",get:function(){return g}},{key:"DefaultType",get:function(){return p}}]),a}();return t(document).on(u.KEYDOWN_DATA_API,f.DATA_TOGGLE,m._dataApiKeydownHandler).on(u.KEYDOWN_DATA_API,f.MENU,m._dataApiKeydownHandler).on(u.CLICK_DATA_API+" "+u.KEYUP_DATA_API,m._clearMenus).on(u.CLICK_DATA_API,f.DATA_TOGGLE,function(e){e.preventDefault(),e.stopPropagation(),m._jQueryInterface.call(t(this),"toggle")}).on(u.CLICK_DATA_API,f.FORM_CHILD,function(t){t.stopPropagation()}),t.fn[e]=m._jQueryInterface,t.fn[e].Constructor=m,t.fn[e].noConflict=function(){return t.fn[e]=a,m._jQueryInterface},m}(e),g=function(t){var e="modal",n=".bs.modal",i=t.fn[e],o={backdrop:!0,keyboard:!0,focus:!0,show:!0},a={backdrop:"(boolean|string)",keyboard:"boolean",focus:"boolean",show:"boolean"},c={HIDE:"hide.bs.modal",HIDDEN:"hidden.bs.modal",SHOW:"show.bs.modal",SHOWN:"shown.bs.modal",FOCUSIN:"focusin.bs.modal",RESIZE:"resize.bs.modal",CLICK_DISMISS:"click.dismiss.bs.modal",KEYDOWN_DISMISS:"keydown.dismiss.bs.modal",MOUSEUP_DISMISS:"mouseup.dismiss.bs.modal",MOUSEDOWN_DISMISS:"mousedown.dismiss.bs.modal",CLICK_DATA_API:"click.bs.modal.data-api"},u={SCROLLBAR_MEASURER:"modal-scrollbar-measure",BACKDROP:"modal-backdrop",OPEN:"modal-open",FADE:"fade",SHOW:"show"},h={DIALOG:".modal-dialog",DATA_TOGGLE:'[data-toggle="modal"]',DATA_DISMISS:'[data-dismiss="modal"]',FIXED_CONTENT:".fixed-top, .fixed-bottom, .is-fixed, .sticky-top",STICKY_CONTENT:".sticky-top"},f=function(){function i(t,e){this._config=this._getConfig(e),this._element=t,this._dialog=t.querySelector(h.DIALOG),this._backdrop=null,this._isShown=!1,this._isBodyOverflowing=!1,this._ignoreBackdropClick=!1,this._scrollbarWidth=0}var f=i.prototype;return f.toggle=function(t){return this._isShown?this.hide():this.show(t)},f.show=function(e){var n=this;if(!this._isTransitioning&&!this._isShown){t(this._element).hasClass(u.FADE)&&(this._isTransitioning=!0);var i=t.Event(c.SHOW,{relatedTarget:e});t(this._element).trigger(i),this._isShown||i.isDefaultPrevented()||(this._isShown=!0,this._checkScrollbar(),this._setScrollbar(),this._adjustDialog(),t(document.body).addClass(u.OPEN),this._setEscapeEvent(),this._setResizeEvent(),t(this._element).on(c.CLICK_DISMISS,h.DATA_DISMISS,function(t){return n.hide(t)}),t(this._dialog).on(c.MOUSEDOWN_DISMISS,function(){t(n._element).one(c.MOUSEUP_DISMISS,function(e){t(e.target).is(n._element)&&(n._ignoreBackdropClick=!0)})}),this._showBackdrop(function(){return n._showElement(e)}))}},f.hide=function(e){var n=this;if(e&&e.preventDefault(),!this._isTransitioning&&this._isShown){var i=t.Event(c.HIDE);if(t(this._element).trigger(i),this._isShown&&!i.isDefaultPrevented()){this._isShown=!1;var r=t(this._element).hasClass(u.FADE);if(r&&(this._isTransitioning=!0),this._setEscapeEvent(),this._setResizeEvent(),t(document).off(c.FOCUSIN),t(this._element).removeClass(u.SHOW),t(this._element).off(c.CLICK_DISMISS),t(this._dialog).off(c.MOUSEDOWN_DISMISS),r){var o=l.getTransitionDurationFromElement(this._element);t(this._element).one(l.TRANSITION_END,function(t){return n._hideModal(t)}).emulateTransitionEnd(o)}else this._hideModal()}}},f.dispose=function(){t.removeData(this._element,"bs.modal"),t(window,document,this._element,this._backdrop).off(n),this._config=null,this._element=null,this._dialog=null,this._backdrop=null,this._isShown=null,this._isBodyOverflowing=null,this._ignoreBackdropClick=null,this._scrollbarWidth=null},f.handleUpdate=function(){this._adjustDialog()},f._getConfig=function(t){return t=s({},o,t),l.typeCheckConfig(e,t,a),t},f._showElement=function(e){var n=this,i=t(this._element).hasClass(u.FADE);this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE||document.body.appendChild(this._element),this._element.style.display="block",this._element.removeAttribute("aria-hidden"),this._element.scrollTop=0,i&&l.reflow(this._element),t(this._element).addClass(u.SHOW),this._config.focus&&this._enforceFocus();var r=t.Event(c.SHOWN,{relatedTarget:e}),o=function(){n._config.focus&&n._element.focus(),n._isTransitioning=!1,t(n._element).trigger(r)};if(i){var s=l.getTransitionDurationFromElement(this._element);t(this._dialog).one(l.TRANSITION_END,o).emulateTransitionEnd(s)}else o()},f._enforceFocus=function(){var e=this;t(document).off(c.FOCUSIN).on(c.FOCUSIN,function(n){document!==n.target&&e._element!==n.target&&0===t(e._element).has(n.target).length&&e._element.focus()})},f._setEscapeEvent=function(){var e=this;this._isShown&&this._config.keyboard?t(this._element).on(c.KEYDOWN_DISMISS,function(t){27===t.which&&(t.preventDefault(),e.hide())}):this._isShown||t(this._element).off(c.KEYDOWN_DISMISS)},f._setResizeEvent=function(){var e=this;this._isShown?t(window).on(c.RESIZE,function(t){return e.handleUpdate(t)}):t(window).off(c.RESIZE)},f._hideModal=function(){var e=this;this._element.style.display="none",this._element.setAttribute("aria-hidden",!0),this._isTransitioning=!1,this._showBackdrop(function(){t(document.body).removeClass(u.OPEN),e._resetAdjustments(),e._resetScrollbar(),t(e._element).trigger(c.HIDDEN)})},f._removeBackdrop=function(){this._backdrop&&(t(this._backdrop).remove(),this._backdrop=null)},f._showBackdrop=function(e){var n=this,i=t(this._element).hasClass(u.FADE)?u.FADE:"";if(this._isShown&&this._config.backdrop){if(this._backdrop=document.createElement("div"),this._backdrop.className=u.BACKDROP,i&&this._backdrop.classList.add(i),t(this._backdrop).appendTo(document.body),t(this._element).on(c.CLICK_DISMISS,function(t){if(n._ignoreBackdropClick)return void(n._ignoreBackdropClick=!1);t.target===t.currentTarget&&("static"===n._config.backdrop?n._element.focus():n.hide())}),i&&l.reflow(this._backdrop),t(this._backdrop).addClass(u.SHOW),!e)return;if(!i)return void e();var r=l.getTransitionDurationFromElement(this._backdrop);t(this._backdrop).one(l.TRANSITION_END,e).emulateTransitionEnd(r)}else if(!this._isShown&&this._backdrop){t(this._backdrop).removeClass(u.SHOW);var o=function(){n._removeBackdrop(),e&&e()};if(t(this._element).hasClass(u.FADE)){var s=l.getTransitionDurationFromElement(this._backdrop);t(this._backdrop).one(l.TRANSITION_END,o).emulateTransitionEnd(s)}else o()}else e&&e()},f._adjustDialog=function(){var t=this._element.scrollHeight>document.documentElement.clientHeight;!this._isBodyOverflowing&&t&&(this._element.style.paddingLeft=this._scrollbarWidth+"px"),this._isBodyOverflowing&&!t&&(this._element.style.paddingRight=this._scrollbarWidth+"px")},f._resetAdjustments=function(){this._element.style.paddingLeft="",this._element.style.paddingRight=""},f._checkScrollbar=function(){var t=document.body.getBoundingClientRect();this._isBodyOverflowing=t.left+t.right<window.innerWidth,this._scrollbarWidth=this._getScrollbarWidth()},f._setScrollbar=function(){var e=this;if(this._isBodyOverflowing){var n=[].slice.call(document.querySelectorAll(h.FIXED_CONTENT)),i=[].slice.call(document.querySelectorAll(h.STICKY_CONTENT));t(n).each(function(n,i){var r=i.style.paddingRight,o=t(i).css("padding-right");t(i).data("padding-right",r).css("padding-right",parseFloat(o)+e._scrollbarWidth+"px")}),t(i).each(function(n,i){var r=i.style.marginRight,o=t(i).css("margin-right");t(i).data("margin-right",r).css("margin-right",parseFloat(o)-e._scrollbarWidth+"px")});var r=document.body.style.paddingRight,o=t(document.body).css("padding-right");t(document.body).data("padding-right",r).css("padding-right",parseFloat(o)+this._scrollbarWidth+"px")}},f._resetScrollbar=function(){var e=[].slice.call(document.querySelectorAll(h.FIXED_CONTENT));t(e).each(function(e,n){var i=t(n).data("padding-right");t(n).removeData("padding-right"),n.style.paddingRight=i||""});var n=[].slice.call(document.querySelectorAll(""+h.STICKY_CONTENT));t(n).each(function(e,n){var i=t(n).data("margin-right");void 0!==i&&t(n).css("margin-right",i).removeData("margin-right")});var i=t(document.body).data("padding-right");t(document.body).removeData("padding-right"),document.body.style.paddingRight=i||""},f._getScrollbarWidth=function(){var t=document.createElement("div");t.className=u.SCROLLBAR_MEASURER,document.body.appendChild(t);var e=t.getBoundingClientRect().width-t.clientWidth;return document.body.removeChild(t),e},i._jQueryInterface=function(e,n){return this.each(function(){var r=t(this).data("bs.modal"),a=s({},o,t(this).data(),"object"===(void 0===e?"undefined":_typeof(e))&&e?e:{});if(r||(r=new i(this,a),t(this).data("bs.modal",r)),"string"==typeof e){if(void 0===r[e])throw new TypeError('No method named "'+e+'"');r[e](n)}else a.show&&r.show(n)})},r(i,null,[{key:"VERSION",get:function(){return"4.1.2"}},{key:"Default",get:function(){return o}}]),i}();return t(document).on(c.CLICK_DATA_API,h.DATA_TOGGLE,function(e){var n,i=this,r=l.getSelectorFromElement(this);r&&(n=document.querySelector(r));var o=t(n).data("bs.modal")?"toggle":s({},t(n).data(),t(this).data());"A"!==this.tagName&&"AREA"!==this.tagName||e.preventDefault();var a=t(n).one(c.SHOW,function(e){e.isDefaultPrevented()||a.one(c.HIDDEN,function(){t(i).is(":visible")&&i.focus()})});f._jQueryInterface.call(t(n),o,this)}),t.fn[e]=f._jQueryInterface,t.fn[e].Constructor=f,t.fn[e].noConflict=function(){return t.fn[e]=i,f._jQueryInterface},f}(e),p=function(t){var e="tooltip",i=".bs.tooltip",o=t.fn[e],a=new RegExp("(^|\\s)bs-tooltip\\S+","g"),c={animation:"boolean",template:"string",title:"(string|element|function)",trigger:"string",delay:"(number|object)",html:"boolean",selector:"(string|boolean)",placement:"(string|function)",offset:"(number|string)",container:"(string|element|boolean)",fallbackPlacement:"(string|array)",boundary:"(string|element)"},u={AUTO:"auto",TOP:"top",RIGHT:"right",BOTTOM:"bottom",LEFT:"left"},h={animation:!0,template:'<div class="tooltip" role="tooltip"><div class="arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:!1,selector:!1,placement:"top",offset:0,container:!1,fallbackPlacement:"flip",boundary:"scrollParent"},f={SHOW:"show",OUT:"out"},d={HIDE:"hide"+i,HIDDEN:"hidden"+i,SHOW:"show"+i,SHOWN:"shown"+i,INSERTED:"inserted"+i,CLICK:"click"+i,FOCUSIN:"focusin"+i,FOCUSOUT:"focusout"+i,MOUSEENTER:"mouseenter"+i,MOUSELEAVE:"mouseleave"+i},g={FADE:"fade",SHOW:"show"},p={TOOLTIP:".tooltip",TOOLTIP_INNER:".tooltip-inner",ARROW:".arrow"},m={HOVER:"hover",FOCUS:"focus",CLICK:"click",MANUAL:"manual"},_=function(){function o(t,e){if(void 0===n)throw new TypeError("Bootstrap tooltips require Popper.js (https://popper.js.org)");this._isEnabled=!0,this._timeout=0,this._hoverState="",this._activeTrigger={},this._popper=null,this.element=t,this.config=this._getConfig(e),this.tip=null,this._setListeners()}var _=o.prototype;return _.enable=function(){this._isEnabled=!0},_.disable=function(){this._isEnabled=!1},_.toggleEnabled=function(){this._isEnabled=!this._isEnabled},_.toggle=function(e){if(this._isEnabled)if(e){var n=this.constructor.DATA_KEY,i=t(e.currentTarget).data(n);i||(i=new this.constructor(e.currentTarget,this._getDelegateConfig()),t(e.currentTarget).data(n,i)),i._activeTrigger.click=!i._activeTrigger.click,i._isWithActiveTrigger()?i._enter(null,i):i._leave(null,i)}else{if(t(this.getTipElement()).hasClass(g.SHOW))return void this._leave(null,this);this._enter(null,this)}},_.dispose=function(){clearTimeout(this._timeout),t.removeData(this.element,this.constructor.DATA_KEY),t(this.element).off(this.constructor.EVENT_KEY),t(this.element).closest(".modal").off("hide.bs.modal"),this.tip&&t(this.tip).remove(),this._isEnabled=null,this._timeout=null,this._hoverState=null,this._activeTrigger=null,null!==this._popper&&this._popper.destroy(),this._popper=null,this.element=null,this.config=null,this.tip=null},_.show=function(){var e=this;if("none"===t(this.element).css("display"))throw new Error("Please use show on visible elements");var i=t.Event(this.constructor.Event.SHOW);if(this.isWithContent()&&this._isEnabled){t(this.element).trigger(i);var r=t.contains(this.element.ownerDocument.documentElement,this.element);if(i.isDefaultPrevented()||!r)return;var o=this.getTipElement(),s=l.getUID(this.constructor.NAME);o.setAttribute("id",s),this.element.setAttribute("aria-describedby",s),this.setContent(),this.config.animation&&t(o).addClass(g.FADE);var a="function"==typeof this.config.placement?this.config.placement.call(this,o,this.element):this.config.placement,c=this._getAttachment(a);this.addAttachmentClass(c);var u=!1===this.config.container?document.body:t(document).find(this.config.container);t(o).data(this.constructor.DATA_KEY,this),t.contains(this.element.ownerDocument.documentElement,this.tip)||t(o).appendTo(u),t(this.element).trigger(this.constructor.Event.INSERTED),this._popper=new n(this.element,o,{placement:c,modifiers:{offset:{offset:this.config.offset},flip:{behavior:this.config.fallbackPlacement},arrow:{element:p.ARROW},preventOverflow:{boundariesElement:this.config.boundary}},onCreate:function(t){t.originalPlacement!==t.placement&&e._handlePopperPlacementChange(t)},onUpdate:function(t){e._handlePopperPlacementChange(t)}}),t(o).addClass(g.SHOW),"ontouchstart"in document.documentElement&&t(document.body).children().on("mouseover",null,t.noop);var h=function(){e.config.animation&&e._fixTransition();var n=e._hoverState;e._hoverState=null,t(e.element).trigger(e.constructor.Event.SHOWN),n===f.OUT&&e._leave(null,e)};if(t(this.tip).hasClass(g.FADE)){var d=l.getTransitionDurationFromElement(this.tip);t(this.tip).one(l.TRANSITION_END,h).emulateTransitionEnd(d)}else h()}},_.hide=function(e){var n=this,i=this.getTipElement(),r=t.Event(this.constructor.Event.HIDE),o=function(){n._hoverState!==f.SHOW&&i.parentNode&&i.parentNode.removeChild(i),n._cleanTipClass(),n.element.removeAttribute("aria-describedby"),t(n.element).trigger(n.constructor.Event.HIDDEN),null!==n._popper&&n._popper.destroy(),e&&e()};if(t(this.element).trigger(r),!r.isDefaultPrevented()){if(t(i).removeClass(g.SHOW),"ontouchstart"in document.documentElement&&t(document.body).children().off("mouseover",null,t.noop),this._activeTrigger[m.CLICK]=!1,this._activeTrigger[m.FOCUS]=!1,this._activeTrigger[m.HOVER]=!1,t(this.tip).hasClass(g.FADE)){var s=l.getTransitionDurationFromElement(i);t(i).one(l.TRANSITION_END,o).emulateTransitionEnd(s)}else o();this._hoverState=""}},_.update=function(){null!==this._popper&&this._popper.scheduleUpdate()},_.isWithContent=function(){return Boolean(this.getTitle())},_.addAttachmentClass=function(e){t(this.getTipElement()).addClass("bs-tooltip-"+e)},_.getTipElement=function(){return this.tip=this.tip||t(this.config.template)[0],this.tip},_.setContent=function(){var e=this.getTipElement();this.setElementContent(t(e.querySelectorAll(p.TOOLTIP_INNER)),this.getTitle()),t(e).removeClass(g.FADE+" "+g.SHOW)},_.setElementContent=function(e,n){var i=this.config.html;"object"===(void 0===n?"undefined":_typeof(n))&&(n.nodeType||n.jquery)?i?t(n).parent().is(e)||e.empty().append(n):e.text(t(n).text()):e[i?"html":"text"](n)},_.getTitle=function(){var t=this.element.getAttribute("data-original-title");return t||(t="function"==typeof this.config.title?this.config.title.call(this.element):this.config.title),t},_._getAttachment=function(t){return u[t.toUpperCase()]},_._setListeners=function(){var e=this;this.config.trigger.split(" ").forEach(function(n){if("click"===n)t(e.element).on(e.constructor.Event.CLICK,e.config.selector,function(t){return e.toggle(t)});else if(n!==m.MANUAL){var i=n===m.HOVER?e.constructor.Event.MOUSEENTER:e.constructor.Event.FOCUSIN,r=n===m.HOVER?e.constructor.Event.MOUSELEAVE:e.constructor.Event.FOCUSOUT;t(e.element).on(i,e.config.selector,function(t){return e._enter(t)}).on(r,e.config.selector,function(t){return e._leave(t)})}t(e.element).closest(".modal").on("hide.bs.modal",function(){return e.hide()})}),this.config.selector?this.config=s({},this.config,{trigger:"manual",selector:""}):this._fixTitle()},_._fixTitle=function(){var t=_typeof(this.element.getAttribute("data-original-title"));(this.element.getAttribute("title")||"string"!==t)&&(this.element.setAttribute("data-original-title",this.element.getAttribute("title")||""),this.element.setAttribute("title",""))},_._enter=function(e,n){var i=this.constructor.DATA_KEY;return n=n||t(e.currentTarget).data(i),n||(n=new this.constructor(e.currentTarget,this._getDelegateConfig()),t(e.currentTarget).data(i,n)),e&&(n._activeTrigger["focusin"===e.type?m.FOCUS:m.HOVER]=!0),t(n.getTipElement()).hasClass(g.SHOW)||n._hoverState===f.SHOW?void(n._hoverState=f.SHOW):(clearTimeout(n._timeout),n._hoverState=f.SHOW,n.config.delay&&n.config.delay.show?void(n._timeout=setTimeout(function(){n._hoverState===f.SHOW&&n.show()},n.config.delay.show)):void n.show())},_._leave=function(e,n){var i=this.constructor.DATA_KEY;if(n=n||t(e.currentTarget).data(i),n||(n=new this.constructor(e.currentTarget,this._getDelegateConfig()),t(e.currentTarget).data(i,n)),e&&(n._activeTrigger["focusout"===e.type?m.FOCUS:m.HOVER]=!1),!n._isWithActiveTrigger()){if(clearTimeout(n._timeout),n._hoverState=f.OUT,!n.config.delay||!n.config.delay.hide)return void n.hide();n._timeout=setTimeout(function(){n._hoverState===f.OUT&&n.hide()},n.config.delay.hide)}},_._isWithActiveTrigger=function(){for(var t in this._activeTrigger)if(this._activeTrigger[t])return!0;return!1},_._getConfig=function(n){return n=s({},this.constructor.Default,t(this.element).data(),"object"===(void 0===n?"undefined":_typeof(n))&&n?n:{}),"number"==typeof n.delay&&(n.delay={show:n.delay,hide:n.delay}),"number"==typeof n.title&&(n.title=n.title.toString()),"number"==typeof n.content&&(n.content=n.content.toString()),l.typeCheckConfig(e,n,this.constructor.DefaultType),n},_._getDelegateConfig=function(){var t={};if(this.config)for(var e in this.config)this.constructor.Default[e]!==this.config[e]&&(t[e]=this.config[e]);return t},_._cleanTipClass=function(){var e=t(this.getTipElement()),n=e.attr("class").match(a);null!==n&&n.length&&e.removeClass(n.join(""))},_._handlePopperPlacementChange=function(t){var e=t.instance;this.tip=e.popper,this._cleanTipClass(),this.addAttachmentClass(this._getAttachment(t.placement))},_._fixTransition=function(){var e=this.getTipElement(),n=this.config.animation;null===e.getAttribute("x-placement")&&(t(e).removeClass(g.FADE),this.config.animation=!1,this.hide(),this.show(),this.config.animation=n)},o._jQueryInterface=function(e){return this.each(function(){var n=t(this).data("bs.tooltip"),i="object"===(void 0===e?"undefined":_typeof(e))&&e;if((n||!/dispose|hide/.test(e))&&(n||(n=new o(this,i),t(this).data("bs.tooltip",n)),"string"==typeof e)){if(void 0===n[e])throw new TypeError('No method named "'+e+'"');n[e]()}})},r(o,null,[{key:"VERSION",get:function(){return"4.1.2"}},{key:"Default",get:function(){return h}},{key:"NAME",get:function(){return e}},{key:"DATA_KEY",get:function(){return"bs.tooltip"}},{key:"Event",get:function(){return d}},{key:"EVENT_KEY",get:function(){return i}},{key:"DefaultType",get:function(){return c}}]),o}();return t.fn[e]=_._jQueryInterface,t.fn[e].Constructor=_,t.fn[e].noConflict=function(){return t.fn[e]=o,_._jQueryInterface},_}(e),m=function(t){var e="popover",n=".bs.popover",i=t.fn[e],o=new RegExp("(^|\\s)bs-popover\\S+","g"),l=s({},p.Default,{placement:"right",trigger:"click",content:"",template:'<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'}),c=s({},p.DefaultType,{content:"(string|element|function)"}),u={FADE:"fade",SHOW:"show"},h={TITLE:".popover-header",CONTENT:".popover-body"},f={HIDE:"hide"+n,HIDDEN:"hidden"+n,SHOW:"show"+n,SHOWN:"shown"+n,INSERTED:"inserted"+n,CLICK:"click"+n,FOCUSIN:"focusin"+n,FOCUSOUT:"focusout"+n,MOUSEENTER:"mouseenter"+n,MOUSELEAVE:"mouseleave"+n},d=function(i){function s(){return i.apply(this,arguments)||this}a(s,i);var d=s.prototype;return d.isWithContent=function(){return this.getTitle()||this._getContent()},d.addAttachmentClass=function(e){t(this.getTipElement()).addClass("bs-popover-"+e)},d.getTipElement=function(){return this.tip=this.tip||t(this.config.template)[0],this.tip},d.setContent=function(){var e=t(this.getTipElement());this.setElementContent(e.find(h.TITLE),this.getTitle());var n=this._getContent();"function"==typeof n&&(n=n.call(this.element)),this.setElementContent(e.find(h.CONTENT),n),e.removeClass(u.FADE+" "+u.SHOW)},d._getContent=function(){return this.element.getAttribute("data-content")||this.config.content},d._cleanTipClass=function(){var e=t(this.getTipElement()),n=e.attr("class").match(o);null!==n&&n.length>0&&e.removeClass(n.join(""))},s._jQueryInterface=function(e){return this.each(function(){var n=t(this).data("bs.popover"),i="object"===(void 0===e?"undefined":_typeof(e))?e:null;if((n||!/destroy|hide/.test(e))&&(n||(n=new s(this,i),t(this).data("bs.popover",n)),"string"==typeof e)){if(void 0===n[e])throw new TypeError('No method named "'+e+'"');n[e]()}})},r(s,null,[{key:"VERSION",get:function(){return"4.1.2"}},{key:"Default",get:function(){return l}},{key:"NAME",get:function(){return e}},{key:"DATA_KEY",get:function(){return"bs.popover"}},{key:"Event",get:function(){return f}},{key:"EVENT_KEY",get:function(){return n}},{key:"DefaultType",get:function(){return c}}]),s}(p);return t.fn[e]=d._jQueryInterface,t.fn[e].Constructor=d,t.fn[e].noConflict=function(){return t.fn[e]=i,d._jQueryInterface},d}(e),_=function(t){var e="scrollspy",n=t.fn[e],i={offset:10,method:"auto",target:""},o={offset:"number",method:"string",target:"(string|element)"},a={ACTIVATE:"activate.bs.scrollspy",SCROLL:"scroll.bs.scrollspy",LOAD_DATA_API:"load.bs.scrollspy.data-api"},c={DROPDOWN_ITEM:"dropdown-item",DROPDOWN_MENU:"dropdown-menu",ACTIVE:"active"},u={DATA_SPY:'[data-spy="scroll"]',ACTIVE:".active",NAV_LIST_GROUP:".nav, .list-group",NAV_LINKS:".nav-link",NAV_ITEMS:".nav-item",LIST_ITEMS:".list-group-item",DROPDOWN:".dropdown",DROPDOWN_ITEMS:".dropdown-item",DROPDOWN_TOGGLE:".dropdown-toggle"},h={OFFSET:"offset",POSITION:"position"},f=function(){function n(e,n){var i=this;this._element=e,this._scrollElement="BODY"===e.tagName?window:e,this._config=this._getConfig(n),this._selector=this._config.target+" "+u.NAV_LINKS+","+this._config.target+" "+u.LIST_ITEMS+","+this._config.target+" "+u.DROPDOWN_ITEMS,this._offsets=[],this._targets=[],this._activeTarget=null,this._scrollHeight=0,t(this._scrollElement).on(a.SCROLL,function(t){return i._process(t)}),this.refresh(),this._process()}var f=n.prototype;return f.refresh=function(){var e=this,n=this._scrollElement===this._scrollElement.window?h.OFFSET:h.POSITION,i="auto"===this._config.method?n:this._config.method,r=i===h.POSITION?this._getScrollTop():0;this._offsets=[],this._targets=[],this._scrollHeight=this._getScrollHeight(),[].slice.call(document.querySelectorAll(this._selector)).map(function(e){var n,o=l.getSelectorFromElement(e);if(o&&(n=document.querySelector(o)),n){var s=n.getBoundingClientRect();if(s.width||s.height)return[t(n)[i]().top+r,o]}return null}).filter(function(t){return t}).sort(function(t,e){return t[0]-e[0]}).forEach(function(t){e._offsets.push(t[0]),e._targets.push(t[1])})},f.dispose=function(){t.removeData(this._element,"bs.scrollspy"),t(this._scrollElement).off(".bs.scrollspy"),this._element=null,this._scrollElement=null,this._config=null,this._selector=null,this._offsets=null,this._targets=null,this._activeTarget=null,this._scrollHeight=null},f._getConfig=function(n){if(n=s({},i,"object"===(void 0===n?"undefined":_typeof(n))&&n?n:{}),"string"!=typeof n.target){var r=t(n.target).attr("id");r||(r=l.getUID(e),t(n.target).attr("id",r)),n.target="#"+r}return l.typeCheckConfig(e,n,o),n},f._getScrollTop=function(){return this._scrollElement===window?this._scrollElement.pageYOffset:this._scrollElement.scrollTop},f._getScrollHeight=function(){return this._scrollElement.scrollHeight||Math.max(document.body.scrollHeight,document.documentElement.scrollHeight)},f._getOffsetHeight=function(){return this._scrollElement===window?window.innerHeight:this._scrollElement.getBoundingClientRect().height},f._process=function(){var t=this._getScrollTop()+this._config.offset,e=this._getScrollHeight(),n=this._config.offset+e-this._getOffsetHeight();if(this._scrollHeight!==e&&this.refresh(),t>=n){var i=this._targets[this._targets.length-1];return void(this._activeTarget!==i&&this._activate(i))}if(this._activeTarget&&t<this._offsets[0]&&this._offsets[0]>0)return this._activeTarget=null,void this._clear();for(var r=this._offsets.length,o=r;o--;){this._activeTarget!==this._targets[o]&&t>=this._offsets[o]&&(void 0===this._offsets[o+1]||t<this._offsets[o+1])&&this._activate(this._targets[o])}},f._activate=function(e){this._activeTarget=e,this._clear();var n=this._selector.split(",");n=n.map(function(t){return t+'[data-target="'+e+'"],'+t+'[href="'+e+'"]'});var i=t([].slice.call(document.querySelectorAll(n.join(","))));i.hasClass(c.DROPDOWN_ITEM)?(i.closest(u.DROPDOWN).find(u.DROPDOWN_TOGGLE).addClass(c.ACTIVE),i.addClass(c.ACTIVE)):(i.addClass(c.ACTIVE),i.parents(u.NAV_LIST_GROUP).prev(u.NAV_LINKS+", "+u.LIST_ITEMS).addClass(c.ACTIVE),i.parents(u.NAV_LIST_GROUP).prev(u.NAV_ITEMS).children(u.NAV_LINKS).addClass(c.ACTIVE)),t(this._scrollElement).trigger(a.ACTIVATE,{relatedTarget:e})},f._clear=function(){var e=[].slice.call(document.querySelectorAll(this._selector));t(e).filter(u.ACTIVE).removeClass(c.ACTIVE)},n._jQueryInterface=function(e){return this.each(function(){var i=t(this).data("bs.scrollspy"),r="object"===(void 0===e?"undefined":_typeof(e))&&e;if(i||(i=new n(this,r),t(this).data("bs.scrollspy",i)),"string"==typeof e){if(void 0===i[e])throw new TypeError('No method named "'+e+'"');i[e]()}})},r(n,null,[{key:"VERSION",get:function(){return"4.1.2"}},{key:"Default",get:function(){return i}}]),n}();return t(window).on(a.LOAD_DATA_API,function(){for(var e=[].slice.call(document.querySelectorAll(u.DATA_SPY)),n=e.length,i=n;i--;){var r=t(e[i]);f._jQueryInterface.call(r,r.data())}}),t.fn[e]=f._jQueryInterface,t.fn[e].Constructor=f,t.fn[e].noConflict=function(){return t.fn[e]=n,f._jQueryInterface},f}(e),v=function(t){var e=t.fn.tab,n={HIDE:"hide.bs.tab",HIDDEN:"hidden.bs.tab",SHOW:"show.bs.tab",SHOWN:"shown.bs.tab",CLICK_DATA_API:"click.bs.tab.data-api"},i={DROPDOWN_MENU:"dropdown-menu",ACTIVE:"active",DISABLED:"disabled",FADE:"fade",SHOW:"show"},o={DROPDOWN:".dropdown",NAV_LIST_GROUP:".nav, .list-group",ACTIVE:".active",ACTIVE_UL:"> li > .active",DATA_TOGGLE:'[data-toggle="tab"], [data-toggle="pill"], [data-toggle="list"]',DROPDOWN_TOGGLE:".dropdown-toggle",DROPDOWN_ACTIVE_CHILD:"> .dropdown-menu .active"},s=function(){function e(t){this._element=t}var s=e.prototype;return s.show=function(){var e=this;if(!(this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE&&t(this._element).hasClass(i.ACTIVE)||t(this._element).hasClass(i.DISABLED))){var r,s,a=t(this._element).closest(o.NAV_LIST_GROUP)[0],c=l.getSelectorFromElement(this._element);if(a){var u="UL"===a.nodeName?o.ACTIVE_UL:o.ACTIVE;s=t.makeArray(t(a).find(u)),s=s[s.length-1]}var h=t.Event(n.HIDE,{relatedTarget:this._element}),f=t.Event(n.SHOW,{relatedTarget:s});if(s&&t(s).trigger(h),t(this._element).trigger(f),!f.isDefaultPrevented()&&!h.isDefaultPrevented()){c&&(r=document.querySelector(c)),this._activate(this._element,a);var d=function(){var i=t.Event(n.HIDDEN,{relatedTarget:e._element}),r=t.Event(n.SHOWN,{relatedTarget:s});t(s).trigger(i),t(e._element).trigger(r)};r?this._activate(r,r.parentNode,d):d()}}},s.dispose=function(){t.removeData(this._element,"bs.tab"),this._element=null},s._activate=function(e,n,r){var s,a=this;s="UL"===n.nodeName?t(n).find(o.ACTIVE_UL):t(n).children(o.ACTIVE);var c=s[0],u=r&&c&&t(c).hasClass(i.FADE),h=function(){return a._transitionComplete(e,c,r)};if(c&&u){var f=l.getTransitionDurationFromElement(c);t(c).one(l.TRANSITION_END,h).emulateTransitionEnd(f)}else h()},s._transitionComplete=function(e,n,r){if(n){t(n).removeClass(i.SHOW+" "+i.ACTIVE);var s=t(n.parentNode).find(o.DROPDOWN_ACTIVE_CHILD)[0];s&&t(s).removeClass(i.ACTIVE),"tab"===n.getAttribute("role")&&n.setAttribute("aria-selected",!1)}if(t(e).addClass(i.ACTIVE),"tab"===e.getAttribute("role")&&e.setAttribute("aria-selected",!0),l.reflow(e),t(e).addClass(i.SHOW),e.parentNode&&t(e.parentNode).hasClass(i.DROPDOWN_MENU)){var a=t(e).closest(o.DROPDOWN)[0];if(a){var c=[].slice.call(a.querySelectorAll(o.DROPDOWN_TOGGLE));t(c).addClass(i.ACTIVE)}e.setAttribute("aria-expanded",!0)}r&&r()},e._jQueryInterface=function(n){return this.each(function(){var i=t(this),r=i.data("bs.tab");if(r||(r=new e(this),i.data("bs.tab",r)),"string"==typeof n){if(void 0===r[n])throw new TypeError('No method named "'+n+'"');r[n]()}})},r(e,null,[{key:"VERSION",get:function(){return"4.1.2"}}]),e}();return t(document).on(n.CLICK_DATA_API,o.DATA_TOGGLE,function(e){e.preventDefault(),s._jQueryInterface.call(t(this),"show")}),t.fn.tab=s._jQueryInterface,t.fn.tab.Constructor=s,t.fn.tab.noConflict=function(){return t.fn.tab=e,s._jQueryInterface},s}(e);!function(t){if(void 0===t)throw new TypeError("Bootstrap's JavaScript requires jQuery. jQuery must be included before Bootstrap's JavaScript.");var e=t.fn.jquery.split(" ")[0].split(".");if(e[0]<2&&e[1]<9||1===e[0]&&9===e[1]&&e[2]<1||e[0]>=4)throw new Error("Bootstrap's JavaScript requires at least jQuery v1.9.1 but less than v4.0.0")}(e),t.Util=l,t.Alert=c,t.Button=u,t.Carousel=h,t.Collapse=f,t.Dropdown=d,t.Modal=g,t.Popover=m,t.Scrollspy=_,t.Tab=v,t.Tooltip=p,Object.defineProperty(t,"__esModule",{value:!0})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
